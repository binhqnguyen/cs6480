## ----------------------------- ##
## openvswitch 2.0.0 test suite. ##
## ----------------------------- ##

testsuite: command line was:
  $ ./tests/testsuite -C tests AUTOTEST_PATH=utilities:vswitchd:ovsdb:tests

## --------- ##
## Platform. ##
## --------- ##

hostname = ubuntu
uname -m = i686
uname -r = 3.8.0-19-generic
uname -s = Linux
uname -v = #29-Ubuntu SMP Wed Apr 17 18:19:42 UTC 2013

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /home/ovs/cs6480/final_project/start/openvswitch-2.0.0/utilities
PATH: /home/ovs/cs6480/final_project/start/openvswitch-2.0.0/vswitchd
PATH: /home/ovs/cs6480/final_project/start/openvswitch-2.0.0/ovsdb
PATH: /home/ovs/cs6480/final_project/start/openvswitch-2.0.0/tests
PATH: /usr/local/sbin
PATH: /usr/local/bin
PATH: /usr/sbin
PATH: /usr/bin
PATH: /sbin
PATH: /bin
PATH: /usr/games
PATH: /usr/local/games

testsuite: atconfig:
| # Configurable variable values for building test suites.
| # Generated by ./config.status.
| # Copyright (C) 2012 Free Software Foundation, Inc.
| 
| # The test suite will define top_srcdir=/../.. etc.
| at_testdir='tests'
| abs_builddir='/home/ovs/cs6480/final_project/start/openvswitch-2.0.0/tests'
| at_srcdir='.'
| abs_srcdir='/home/ovs/cs6480/final_project/start/openvswitch-2.0.0/tests'
| at_top_srcdir='..'
| abs_top_srcdir='/home/ovs/cs6480/final_project/start/openvswitch-2.0.0'
| at_top_build_prefix='../'
| abs_top_builddir='/home/ovs/cs6480/final_project/start/openvswitch-2.0.0'
| 
| # Backward compatibility with Autotest <= 2.59b:
| at_top_builddir=$at_top_build_prefix
| 
| AUTOTEST_PATH='tests'
| 
| SHELL=${CONFIG_SHELL-'/bin/bash'}

testsuite: atlocal:
| # -*- shell-script -*-
| HAVE_OPENSSL='no'
| HAVE_PYTHON='yes'
| EGREP='/bin/grep -E'
| PERL='/usr/bin/perl'
| 
| if test x"$PYTHON" = x; then
|     PYTHON='/usr/bin/python'
| fi
| 
| PYTHONPATH=$abs_top_srcdir/python:$abs_top_builddir/tests:$PYTHONPATH
| export PYTHONPATH
| 
| PYTHONIOENCODING=utf_8
| export PYTHONIOENCODING
| 
| # PYTHONDONTWRITEBYTECODE=yes keeps Python 2.6+ from creating .pyc and .pyo
| # files.  Creating .py[co] works OK for any given version of Open
| # vSwitch, but it causes trouble if you switch from a version with
| # foo/__init__.py into an (older) version with plain foo.py, since
| # foo/__init__.pyc will cause Python to ignore foo.py.
| #
| # Python before version 2.6 always creates .pyc files, so if you develop
| # with such an older version then you're out of luck.
| PYTHONDONTWRITEBYTECODE=yes
| export PYTHONDONTWRITEBYTECODE
| 
| if test $HAVE_PYTHON = yes; then
|     if python -m argparse 2>/dev/null; then
|         :
|     else
|         PYTHONPATH=$PYTHONPATH:$abs_top_srcdir/python/compat
|         export PYTHONPATH
|     fi
| fi
| 
| # Enable malloc debugging features.
| case `uname` in
| Linux)
|     MALLOC_CHECK_=2
|     MALLOC_PERTURB_=165
|     export MALLOC_CHECK_
|     export MALLOC_PERTURB_
|     ;;
| FreeBSD)
|     case `uname -r` in
|     [789].*)
|         MALLOC_CONF=AJ
|         ;;
|     *)
|         MALLOC_CONF=abort:true,junk:true,redzone:true
|         ;;
|     esac
|     export MALLOC_CONF
| esac

## ---------------- ##
## Tested programs. ##
## ---------------- ##

./testsuite.at:1: /home/ovs/cs6480/final_project/start/openvswitch-2.0.0/vswitchd/ovs-vswitchd --version
ovs-vswitchd (Open vSwitch) 2.0.0
Compiled Dec  3 2013 22:33:39
OpenFlow versions 0x1:0x1

./testsuite.at:1: /home/ovs/cs6480/final_project/start/openvswitch-2.0.0/utilities/ovs-vsctl --version
ovs-vsctl (Open vSwitch) 2.0.0
Compiled Dec  3 2013 22:33:25

./testsuite.at:1: /usr/bin/perl --version

This is perl 5, version 14, subversion 2 (v5.14.2) built for i686-linux-gnu-thread-multi-64int
(with 80 registered patches, see perl -V for more detail)

Copyright 1987-2011, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using "man perl" or "perldoc perl".  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.


## ------------------ ##
## Running the tests. ##
## ------------------ ##
testsuite: starting at: Tue Dec  3 22:55:01 PST 2013
1. bfd - basic config on different bridges (bfd.at:37): ok     (0m0.000s 0m0.012s)
2. bfd - Verify tunnel down detection (bfd.at:79): ok     (0m0.004s 0m0.024s)
3. bfd - concatenated path down (bfd.at:159): ok     (0m0.004s 0m0.004s)
4. bfd - Edit the Min Tx/Rx values (bfd.at:186): ok     (0m0.004s 0m0.008s)
5. bfd - check_tnl_key (bfd.at:217): ok     (0m0.000s 0m0.000s)
6. bfd - bfd decay (bfd.at:252): ok     (0m0.004s 0m0.008s)
7. bfd - bfd forwarding_if_rx 1 (bfd.at:514): ok     (0m0.000s 0m0.000s)
8. bfd - bfd forwarding_if_rx 2 (bfd.at:581): ok     (0m0.000s 0m0.000s)
9. bfd - bfd forwarding_if_rx 3 (bfd.at:656): ok     (0m0.000s 0m0.008s)
10. cfm - demand mode (cfm.at:18): ok     (0m0.004s 0m0.048s)
11. lacp - config (lacp.at:3): ok     (0m0.000s 0m0.000s)
12. lacp - multi port config (lacp.at:40): ok     (0m0.000s 0m0.000s)
13. lacp - negotiation (lacp.at:121): ok     (0m0.016s 0m0.004s)
14. test flow extractor (library.at:3): ok     (0m0.056s 0m0.000s)
15. test TCP/IP checksumming (library.at:9): ok     (0m0.000s 0m0.000s)
16. test hash functions (library.at:14): ok     (0m0.000s 0m0.000s)
17. test hash map (library.at:18): ok     (0m0.080s 0m0.000s)
18. test hash index (library.at:23): ok     (0m0.196s 0m0.000s)
19. test atomic operations (library.at:28): ok     (0m0.000s 0m0.000s)
20. test linked lists (library.at:32): ok     (0m0.000s 0m0.000s)
21. test packet library (library.at:37): ok     (0m0.000s 0m0.000s)
22. test SHA-1 (library.at:41): ok     (0m0.112s 0m0.000s)
23. test type properties (library.at:46): ok     (0m0.000s 0m0.000s)
24. test strtok_r bug fix (library.at:50): ok     (0m0.000s 0m0.000s)
25. test byte order conversion (library.at:55): ok     (0m0.000s 0m0.000s)
26. test random number generator (library.at:60): ok     (0m0.000s 0m0.000s)
27. ctz() function (library.at:112): ok     (0m0.000s 0m0.000s)
28. round_up_pow2() function (library.at:112): ok     (0m0.000s 0m0.000s)
29. round_down_pow2() function (library.at:112): ok     (0m0.000s 0m0.000s)
30. popcount() function (library.at:112): ok     (0m0.000s 0m0.000s)
31. log_2_floor() function (library.at:112): ok     (0m0.000s 0m0.000s)
32. bitwise_copy() function (library.at:112): ok     (0m0.004s 0m0.000s)
33. bitwise_zero() function (library.at:112): ok     (0m0.000s 0m0.000s)
34. bitwise_one() function (library.at:112): ok     (0m0.000s 0m0.000s)
35. bitwise_is_all_zeros() function (library.at:112): ok     (0m0.204s 0m0.000s)
36. test unix socket, short pathname - C (library.at:128): ok     (0m0.000s 0m0.000s)
37. test unix socket, long pathname - C (library.at:137): ok     (0m0.000s 0m0.000s)
38. test unix socket, short pathname - Python (library.at:146): ok     (0m0.028s 0m0.008s)
39. test unix socket, long pathname - Python (library.at:156): ok     (0m0.024s 0m0.008s)
40. ovs_assert (library.at:166): ok     (0m0.000s 0m0.000s)
41. heap library -- insert delete same order (heap.at:8): ok     (0m0.048s 0m0.000s)
42. heap library -- insert delete reverse order (heap.at:9): ok     (0m0.048s 0m0.000s)
43. heap library -- insert delete every order (heap.at:10): ok     (0m0.088s 0m0.000s)
44. heap library -- insert delete same order with dups (heap.at:11): ok     (0m0.468s 0m0.004s)
45. heap library -- raw insert (heap.at:12): ok     (0m0.032s 0m0.000s)
46. heap library -- raw delete (heap.at:13): ok     (0m0.000s 0m0.004s)
47. hrw bundle link selection (bundle.at:10): ok     (0m0.192s 0m0.008s)
48. active_backup bundle link selection (bundle.at:80): ok     (0m0.068s 0m0.008s)
49. hrw bundle single link selection (bundle.at:151): ok     (0m0.020s 0m0.004s)
50. hrw bundle no link selection (bundle.at:159): ok     (0m0.012s 0m0.004s)
51. bundle action missing argument (bundle.at:166): ok     (0m0.000s 0m0.000s)
52. bundle action bad fields (bundle.at:172): ok     (0m0.000s 0m0.000s)
53. bundle action bad algorithm (bundle.at:178): ok     (0m0.000s 0m0.000s)
54. bundle action bad slave type (bundle.at:184): ok     (0m0.000s 0m0.000s)
55. bundle action bad slave delimiter (bundle.at:190): ok     (0m0.000s 0m0.000s)
56. flow classifier - empty (classifier.at:2): ok     (0m0.000s 0m0.000s)
57. flow classifier - destroy null (classifier.at:2): ok     (0m0.000s 0m0.000s)
58. flow classifier - single rule (classifier.at:2): ok     (0m1.224s 0m0.000s)
59. flow classifier - rule replacement (classifier.at:2): ok     (0m2.060s 0m0.004s)
60. flow classifier - many rules in one list (classifier.at:2): ok     (0m0.188s 0m0.004s)
61. flow classifier - many rules in one table (classifier.at:2): ok     (0m1.484s 0m0.000s)
62. flow classifier - many rules in two tables (classifier.at:2): ok     (0m5.508s 0m0.000s)
63. flow classifier - many rules in five tables (classifier.at:2): ok     (0m5.492s 0m0.004s)
64. miniflow - miniflow (classifier.at:17): ok     (0m0.004s 0m0.000s)
65. miniflow - minimask_has_extra (classifier.at:17): ok     (0m0.004s 0m0.000s)
66. miniflow - minimask_combine (classifier.at:17): ok     (0m0.004s 0m0.000s)
67. check struct tail padding (check-structs.at:11): ok     (0m0.008s 0m0.008s)
68. check struct internal alignment (check-structs.at:21): ok     (0m0.008s 0m0.004s)
69. check struct declared size (check-structs.at:32): ok     (0m0.008s 0m0.008s)
70. check wrong struct's declared size (check-structs.at:44): ok     (0m0.012s 0m0.004s)
71. daemon (daemon.at:3): ok     (0m0.000s 0m0.000s)
72. daemon --monitor (daemon.at:21): ok     (0m0.008s 0m0.032s)
73. daemon --detach (daemon.at:69): ok     (0m0.004s 0m0.004s)
74. daemon --detach --monitor (daemon.at:85): ok     (0m0.036s 0m0.044s)
75. daemon --detach startup errors (daemon.at:134): ok     (0m0.004s 0m0.008s)
76. daemon --detach --monitor startup errors (daemon.at:143): ok     (0m0.008s 0m0.004s)
77. daemon - Python (daemon-py.at:3): ok     (0m0.000s 0m0.000s)
78. daemon --monitor - Python (daemon-py.at:21): ok     (0m0.016s 0m0.020s)
79. daemon --monitor restart exit code - Python (daemon-py.at:64): ok     (0m0.008s 0m0.024s)
80. daemon --detach - Python (daemon-py.at:107): ok     (0m0.104s 0m0.028s)
81. daemon --detach --monitor - Python (daemon-py.at:123): ok     (0m0.136s 0m0.072s)
82. daemon --detach startup errors - Python (daemon-py.at:172): ok     (0m0.128s 0m0.016s)
83. daemon --detach --monitor startup errors - Python (daemon-py.at:181): ok     (0m0.112s 0m0.036s)
84. daemon --detach closes standard fds - Python (daemon-py.at:190): ok     (0m0.100s 0m0.040s)
85. daemon --detach --monitor closes standard fds (daemon-py.at:210): ok     (0m0.044s 0m0.020s)
86. OpenFlow 1.0 action translation (ofp-actions.at:3): ok     (0m0.000s 0m0.000s)
87. OpenFlow 1.1 action translation (ofp-actions.at:132): ok     (0m0.000s 0m0.000s)
88. OpenFlow 1.1 instruction translation (ofp-actions.at:310): ok     (0m0.000s 0m0.000s)
89. empty (ofp-print.at:3): ok     (0m0.000s 0m0.000s)
90. too short (ofp-print.at:9): ok     (0m0.000s 0m0.000s)
91. wrong OpenFlow version (ofp-print.at:17): ok     (0m0.000s 0m0.000s)
92. truncated message (ofp-print.at:27): ok     (0m0.000s 0m0.000s)
93. message only uses part of buffer (ofp-print.at:35): ok     (0m0.000s 0m0.000s)
94. OFPT_HELLO - ordinary (ofp-print.at:44): ok     (0m0.000s 0m0.000s)
95. OFPT_HELLO with extra data (ofp-print.at:52): ok     (0m0.000s 0m0.000s)
96. OFPT_HELLO with version bitmap (ofp-print.at:64): ok     (0m0.000s 0m0.000s)
97. OFPT_HELLO with version bitmap and extra data (ofp-print.at:73): ok     (0m0.000s 0m0.000s)
98. OFPT_HELLO with higher than supported version (ofp-print.at:87): ok     (0m0.000s 0m0.000s)
99. OFPT_HELLO with contradictory version bitmaps (ofp-print.at:106): ok     (0m0.000s 0m0.000s)
100. OFPT_ECHO_REQUEST, empty payload (ofp-print.at:148): ok     (0m0.000s 0m0.000s)
101. OFPT_ECHO_REQUEST, 5-byte payload (ofp-print.at:155): ok     (0m0.000s 0m0.000s)
102. OFPT_ECHO_REPLY, empty payload (ofp-print.at:163): ok     (0m0.000s 0m0.000s)
103. OFPT_ECHO_REPLY, 5-byte payload (ofp-print.at:170): ok     (0m0.000s 0m0.000s)
104. OFPT_FEATURES_REQUEST (ofp-print.at:178): ok     (0m0.000s 0m0.000s)
105. OFPT_FEATURES_REPLY - OF1.0 (ofp-print.at:185): ok     (0m0.000s 0m0.000s)
106. OFPT_FEATURES_REPLY cut off mid-port - OF1.0 (ofp-print.at:235): ok     (0m0.000s 0m0.000s)
107. OFPT_FEATURES_REPLY - OF1.1 (ofp-print.at:274): ok     (0m0.000s 0m0.000s)
108. OFPT_FEATURES_REPLY cut off mid-port - OF1.1 (ofp-print.at:305): ok     (0m0.000s 0m0.000s)
109. OFPT_FEATURES_REPLY - OF1.2 (ofp-print.at:334): ok     (0m0.000s 0m0.000s)
110. OFPT_FEATURES_REPLY cut off mid-port - OF1.2 (ofp-print.at:365): ok     (0m0.000s 0m0.000s)
111. OFPT_FEATURES_REPLY - OF1.3 (ofp-print.at:394): ok     (0m0.000s 0m0.000s)
112. OFPT_FEATURES_REPLY - with auxiliary_id - OF1.3 (ofp-print.at:406): ok     (0m0.000s 0m0.000s)
113. OFPT_GET_CONFIG_REQUEST (ofp-print.at:418): ok     (0m0.000s 0m0.000s)
114. OFPT_GET_CONFIG_REPLY, most common form (ofp-print.at:425): ok     (0m0.000s 0m0.000s)
115. OFPT_GET_CONFIG_REPLY, frags and miss_send_len (ofp-print.at:433): ok     (0m0.000s 0m0.000s)
116. OFPT_PACKET_IN - OF1.0 (ofp-print.at:440): ok     (0m0.000s 0m0.000s)
117. OFPT_PACKET_IN - OF1.0, with hex output of packet data) (ofp-print.at:454): ok     (0m0.000s 0m0.000s)
118. OFPT_PACKET_IN - OF1.2 (ofp-print.at:472): ok     (0m0.000s 0m0.000s)
119. OFPT_PACKET_IN - OF1.2, with hex output of packet data (ofp-print.at:486): ok     (0m0.000s 0m0.000s)
120. OFPT_PACKET_IN - OF1.3 (ofp-print.at:503): ok     (0m0.000s 0m0.000s)
121. OFPT_PACKET_IN - OF1.3, with hex output of packet data (ofp-print.at:518): ok     (0m0.000s 0m0.000s)
122. OFPT_FLOW_REMOVED - OF1.0 (ofp-print.at:536): ok     (0m0.000s 0m0.000s)
123. OFPT_FLOW_REMOVED - OF1.2 (ofp-print.at:550): ok     (0m0.000s 0m0.000s)
124. OFPT_FLOW_REMOVED - OF1.3 (ofp-print.at:561): ok     (0m0.000s 0m0.000s)
125. OFPT_PORT_STATUS - OF1.0 (ofp-print.at:572): ok     (0m0.000s 0m0.000s)
126. OFPT_PORT_STATUS - OF1.1 (ofp-print.at:590): ok     (0m0.000s 0m0.000s)
127. OFPT_PACKET_OUT - OF1.0 (ofp-print.at:609): ok     (0m0.000s 0m0.000s)
128. OFPT_PACKET_OUT - OF1.0, with packet (ofp-print.at:623): ok     (0m0.000s 0m0.000s)
129. OFPT_PACKET_OUT - OF1.0, with hex output of packet data (ofp-print.at:638): ok     (0m0.000s 0m0.000s)
130. OFPT_PACKET_OUT - OF1.1 (ofp-print.at:657): ok     (0m0.000s 0m0.000s)
131. OFPT_PACKET_OUT - OF1.1, with packet (ofp-print.at:668): ok     (0m0.000s 0m0.000s)
132. OFPT_FLOW_MOD - OF1.0 - low verbosity (ofp-print.at:685): ok     (0m0.000s 0m0.000s)
133. OFPT_FLOW_MOD - OF1.1 - low verbosity (ofp-print.at:703): ok     (0m0.000s 0m0.000s)
134. OFPT_FLOW_MOD - OF1.2 - low verbosity (ofp-print.at:723): ok     (0m0.000s 0m0.000s)
135. OFPT_FLOW_MOD - OF1.0 - high verbosity (ofp-print.at:743): ok     (0m0.000s 0m0.000s)
136. OFPT_FLOW_MOD - OF1.2 - low verbosity (ofp-print.at:761): ok     (0m0.000s 0m0.000s)
137. OFPT_FLOW_MOD - OF1.3 - flags - low verbosity (ofp-print.at:780): ok     (0m0.000s 0m0.000s)
138. OFPT_FLOW_MOD - OF1.2 - set-field ip_src (ofp-print.at:798): ok     (0m0.000s 0m0.000s)
139. OFPT_FLOW_MOD - OF1.2 - set-field ip_dst (ofp-print.at:813): ok     (0m0.000s 0m0.000s)
140. OFPT_FLOW_MOD - OF1.2 - set-field sctp_src (ofp-print.at:828): ok     (0m0.000s 0m0.000s)
141. OFPT_FLOW_MOD - OF1.2 - set-field sctp_dst (ofp-print.at:843): ok     (0m0.000s 0m0.000s)
142. OFPT_FLOW reply - OF1.2 - set-field ip_src (ofp-print.at:858): ok     (0m0.000s 0m0.000s)
143. OFPT_FLOW reply - OF1.2 - set-field ip_dst (ofp-print.at:875): ok     (0m0.000s 0m0.000s)
144. OFPT_FLOW reply - OF1.2 - set-field sctp_src (ofp-print.at:892): ok     (0m0.000s 0m0.000s)
145. OFPT_FLOW reply - OF1.2 - set-field sctp_dst (ofp-print.at:909): ok     (0m0.000s 0m0.000s)
146. OFPT_PORT_MOD - OF1.0 (ofp-print.at:926): ok     (0m0.000s 0m0.000s)
147. OFPT_PORT_MOD - OF1.1 (ofp-print.at:939): ok     (0m0.000s 0m0.000s)
148. OFPT_PORT_MOD - OF1.2 (ofp-print.at:953): ok     (0m0.000s 0m0.000s)
149. OFPT_PORT_MOD - OF1.3 (ofp-print.at:967): ok     (0m0.000s 0m0.000s)
150. OFPST_DESC request (ofp-print.at:981): ok     (0m0.000s 0m0.000s)
151. OFPST_DESC reply (ofp-print.at:988): ok     (0m0.000s 0m0.000s)
152. OFPST_FLOW request - OF1.0 (ofp-print.at:1068): ok     (0m0.000s 0m0.000s)
153. OFPST_FLOW request - OF1.2 (ofp-print.at:1080): ok     (0m0.000s 0m0.000s)
154. OFPST_FLOW request - OF1.3 (ofp-print.at:1092): ok     (0m0.000s 0m0.000s)
155. OFPST_FLOW reply - OF1.0 (ofp-print.at:1104): ok     (0m0.000s 0m0.000s)
156. OFPST_FLOW reply - OF1.2 (ofp-print.at:1148): ok     (0m0.000s 0m0.000s)
157. OFPST_AGGREGATE request - OF1.0 (ofp-print.at:1183): ok     (0m0.000s 0m0.000s)
158. OFPST_AGGREGATE request - OF1.2 (ofp-print.at:1195): ok     (0m0.000s 0m0.000s)
159. OFPST_AGGREGATE request - OF1.3 (ofp-print.at:1207): ok     (0m0.000s 0m0.000s)
160. OFPST_AGGREGATE reply - OF1.0 (ofp-print.at:1219): ok     (0m0.000s 0m0.000s)
161. OFPST_AGGREGATE reply - OF1.2 (ofp-print.at:1230): ok     (0m0.000s 0m0.000s)
162. OFPST_AGGREGATE reply - OF1.3 (ofp-print.at:1241): ok     (0m0.000s 0m0.000s)
163. OFPST_TABLE request - OF1.0 (ofp-print.at:1252): ok     (0m0.000s 0m0.000s)
164. OFPST_TABLE request - OF1.1 (ofp-print.at:1259): ok     (0m0.000s 0m0.000s)
165. OFPST_TABLE request - OF1.2 (ofp-print.at:1266): ok     (0m0.000s 0m0.000s)
166. OFPST_TABLE request - OF1.3 (ofp-print.at:1273): ok     (0m0.000s 0m0.000s)
167. OFPST_TABLE reply - OF1.0 (ofp-print.at:1280): ok     (0m0.000s 0m0.000s)
168. OFPST_TABLE reply - OF1.2 (ofp-print.at:1295): ok     (0m0.056s 0m0.176s)
169. OFPST_TABLE reply - OF1.3 (ofp-print.at:1350): ok     (0m0.000s 0m0.000s)
170. OFPST_PORT request - 1.0 (ofp-print.at:1364): ok     (0m0.000s 0m0.000s)
171. OFPST_PORT request - 1.1 (ofp-print.at:1374): ok     (0m0.000s 0m0.000s)
172. OFPST_PORT request - 1.2 (ofp-print.at:1384): ok     (0m0.000s 0m0.000s)
173. OFPST_PORT request - 1.3 (ofp-print.at:1394): ok     (0m0.000s 0m0.000s)
174. OFPST_PORT reply - OF1.0 (ofp-print.at:1404): ok     (0m0.000s 0m0.000s)
175. OFPST_PORT reply - OF1.2 (ofp-print.at:1447): ok     (0m0.000s 0m0.000s)
176. OFPST_PORT reply - OF1.3 (ofp-print.at:1482): ok     (0m0.000s 0m0.000s)
177. OFPST_QUEUE request - OF1.0 (ofp-print.at:1521): ok     (0m0.000s 0m0.000s)
178. OFPST_QUEUE request - OF1.1 (ofp-print.at:1531): ok     (0m0.000s 0m0.000s)
179. OFPST_QUEUE request - OF1.2 (ofp-print.at:1541): ok     (0m0.000s 0m0.000s)
180. OFPST_QUEUE request - OF1.3 (ofp-print.at:1551): ok     (0m0.000s 0m0.000s)
181. OFPST_QUEUE reply - OF1.0 (ofp-print.at:1561): ok     (0m0.000s 0m0.000s)
182. OFPST_PORT_DESC request - OF1.0 (ofp-print.at:1588): ok     (0m0.000s 0m0.000s)
183. OFPST_QUEUE reply - OF1.1 (ofp-print.at:1595): ok     (0m0.000s 0m0.000s)
184. OFPST_QUEUE reply - OF1.2 (ofp-print.at:1622): ok     (0m0.000s 0m0.000s)
185. OFPST_QUEUE reply - OF1.3 (ofp-print.at:1649): ok     (0m0.000s 0m0.000s)
186. OFPST_PORT_DESC reply - OF1.0 (ofp-print.at:1682): ok     (0m0.000s 0m0.000s)
187. OFPT_METER_MOD request - OF1.3 (ofp-print.at:1701): ok     (0m0.000s 0m0.000s)
188. OFPST_METER request - OF1.3 (ofp-print.at:1712): ok     (0m0.000s 0m0.000s)
189. OFPST_METER_CONFIG request - OF1.3 (ofp-print.at:1719): ok     (0m0.000s 0m0.000s)
190. OFPST_METER_FEATURES request - OF1.3 (ofp-print.at:1726): ok     (0m0.000s 0m0.000s)
191. OFPST_METER_FEATURES reply - OF1.3 (ofp-print.at:1733): ok     (0m0.000s 0m0.000s)
192. OFPST_METER_CONFIG reply - OF1.3 (ofp-print.at:1746): ok     (0m0.000s 0m0.000s)
193. OFPST_METER reply - OF1.3 (ofp-print.at:1766): ok     (0m0.000s 0m0.000s)
194. OFPT_BARRIER_REQUEST - OF1.0 (ofp-print.at:1790): ok     (0m0.000s 0m0.000s)
195. OFPT_BARRIER_REQUEST - OF1.1 (ofp-print.at:1797): ok     (0m0.000s 0m0.000s)
196. OFPT_BARRIER_REQUEST - OF1.2 (ofp-print.at:1804): ok     (0m0.000s 0m0.000s)
197. OFPT_BARRIER_REQUEST - OF1.3 (ofp-print.at:1811): ok     (0m0.000s 0m0.000s)
198. OFPT_BARRIER_REPLY - OF1.0 (ofp-print.at:1818): ok     (0m0.000s 0m0.000s)
199. OFPT_BARRIER_REPLY - OF1.1 (ofp-print.at:1825): ok     (0m0.000s 0m0.000s)
200. OFPT_BARRIER_REPLY - OF1.2 (ofp-print.at:1832): ok     (0m0.000s 0m0.000s)
201. OFPT_BARRIER_REPLY - OF1.3 (ofp-print.at:1839): ok     (0m0.000s 0m0.000s)
202. OFPT_SET_ASYNC - OF1.3 (ofp-print.at:1847): ok     (0m0.000s 0m0.000s)
203. OFPT_ROLE_REQUEST - OF1.2 (ofp-print.at:1866): ok     (0m0.000s 0m0.000s)
204. OFPT_ROLE_REQUEST - nochange - OF1.2 (ofp-print.at:1876): ok     (0m0.000s 0m0.000s)
205. NXT_ROLE_REQUEST (ofp-print.at:1886): ok     (0m0.000s 0m0.000s)
206. OFPT_ROLE_REPLY - OF1.2 (ofp-print.at:1896): ok     (0m0.000s 0m0.000s)
207. NXT_ROLE_REPLY (ofp-print.at:1906): ok     (0m0.000s 0m0.000s)
208. NXT_SET_PACKET_IN (ofp-print.at:1916): ok     (0m0.000s 0m0.000s)
209. NXT_PACKET_IN (ofp-print.at:1926): ok     (0m0.000s 0m0.000s)
210. NXT_PACKET_IN, with hex output of packet data (ofp-print.at:1947): ok     (0m0.000s 0m0.000s)
211. NXT_SET_ASYNC_CONFIG (ofp-print.at:1972): ok     (0m0.000s 0m0.000s)
212. NXT_SET_CONTROLLER_ID (ofp-print.at:1992): ok     (0m0.000s 0m0.000s)
213. NXT_FLOW_MONITOR_CANCEL (ofp-print.at:2002): ok     (0m0.000s 0m0.000s)
214. NXT_FLOW_MONITOR_PAUSED (ofp-print.at:2012): ok     (0m0.000s 0m0.000s)
215. NXT_FLOW_MONITOR_RESUMED (ofp-print.at:2021): ok     (0m0.000s 0m0.000s)
216. NXT_SET_FLOW_FORMAT (ofp-print.at:2030): ok     (0m0.000s 0m0.000s)
217. NXT_FLOW_MOD, low verbosity (ofp-print.at:2041): ok     (0m0.000s 0m0.000s)
218. NXT_FLOW_MOD, high verbosity (ofp-print.at:2057): ok     (0m0.000s 0m0.000s)
219. NXT_FLOW_REMOVED (ofp-print.at:2071): ok     (0m0.000s 0m0.000s)
220. NXT_FLOW_MOD_TABLE_ID (ofp-print.at:2087): ok     (0m0.000s 0m0.000s)
221. NXST_FLOW request (ofp-print.at:2097): ok     (0m0.000s 0m0.000s)
222. NXST_FLOW reply (ofp-print.at:2107): ok     (0m0.000s 0m0.000s)
223. NXST_AGGREGATE request (ofp-print.at:2261): ok     (0m0.000s 0m0.000s)
224. NXST_AGGREGATE reply (ofp-print.at:2271): ok     (0m0.000s 0m0.000s)
225. NXST_FLOW_MONITOR request (ofp-print.at:2282): ok     (0m0.000s 0m0.000s)
226. NXST_FLOW_MONITOR reply (ofp-print.at:2295): ok     (0m0.000s 0m0.000s)
227. encoding hellos (ofp-util.at:3): ok     (0m0.000s 0m0.000s)
228. OFPT_ERROR with type OFPET_HELLO_FAILED - OF1.0 (ofp-errors.at:3): ok     (0m0.000s 0m0.000s)
229. OFPT_ERROR with type OFPET_HELLO_FAILED - OF1.1 (ofp-errors.at:11): ok     (0m0.000s 0m0.000s)
230. OFPT_ERROR with type OFPET_BAD_REQUEST - OF1.0 (ofp-errors.at:19): ok     (0m0.000s 0m0.000s)
231. OFPT_ERROR prints type of truncated inner messages (ofp-errors.at:29): ok     (0m0.000s 0m0.000s)
232. OFPT_ERROR with code OFPBMC_BAD_PREREQ - OF1.0 (ofp-errors.at:46): ok     (0m0.000s 0m0.000s)
233. OFPT_ERROR with code OFPBMC_BAD_PREREQ - OF1.1 (ofp-errors.at:54): ok     (0m0.000s 0m0.000s)
234. OFPT_ERROR with type OFPFMFC_OVERLAP - OF1.0 (ofp-errors.at:64): ok     (0m0.000s 0m0.000s)
235. OFPT_ERROR with type OFPBIC_UNSUP_INST - OF1.1 (ofp-errors.at:73): ok     (0m0.000s 0m0.000s)
236. encoding OFPBIC_* experimenter errors (ofp-errors.at:87): ok     (0m0.000s 0m0.000s)
237. encoding errors extension that became official (ofp-errors.at:103): ok     (0m0.000s 0m0.000s)
238. decoding OFPBIC_* experimenter errors (ofp-errors.at:122): ok     (0m0.000s 0m0.000s)
239. decoding experimenter errors (ofp-errors.at:138): ok     (0m0.000s 0m0.000s)
240. encoding experimenter errors (ofp-errors.at:154): ok     (0m0.000s 0m0.000s)
241. ovs-ofctl parse-flows choice of protocol (ovs-ofctl.at:3): ok     (0m0.000s 0m0.000s)
242. ovs-ofctl parse-flows (OpenFlow 1.0) (ovs-ofctl.at:105): ok     (0m0.000s 0m0.000s)
243. ovs-ofctl parse-flows (OpenFlow 1.2) (ovs-ofctl.at:142): ok     (0m0.000s 0m0.000s)
244. ovs-ofctl parse-flows (With Tunnel-Parameters) (ovs-ofctl.at:179): ok     (0m0.000s 0m0.000s)
245. ovs-ofctl parse-flows (skb_priority) (ovs-ofctl.at:191): ok     (0m0.000s 0m0.000s)
246. ovs-ofctl parse-flows (NXM) (ovs-ofctl.at:203): ok     (0m0.000s 0m0.000s)
247. ovs-ofctl -F nxm parse-flows (ovs-ofctl.at:274): ok     (0m0.000s 0m0.000s)
248. ovs-ofctl -F nxm -mmm parse-flows (ovs-ofctl.at:341): ok     (0m0.000s 0m0.000s)
249. ovs-ofctl parse-nx-match (ovs-ofctl.at:406): ok     (0m0.000s 0m0.000s)
250. ovs-ofctl parse-ofp10-match (ovs-ofctl.at:993): ok     (0m0.000s 0m0.000s)
251. ovs-ofctl parse-ofp11-match (ovs-ofctl.at:1208): ok     (0m0.000s 0m0.000s)
252. ovs-ofctl parse-nx-match loose (ovs-ofctl.at:1533): ok     (0m0.000s 0m0.000s)
253. ovs-ofctl parse-oxm (ovs-ofctl.at:1548): ok     (0m0.000s 0m0.000s)
254. ovs-ofctl parse-oxm loose (ovs-ofctl.at:1992): ok     (0m0.000s 0m0.000s)
255. ovs-ofctl check-vlan (ovs-ofctl.at:2009): ok     (0m0.000s 0m0.000s)
256. ovs-ofctl -F option and NXM features (ovs-ofctl.at:2106): ok     (0m0.000s 0m0.000s)
257. ovs-ofctl -F option with flow_mods (ovs-ofctl.at:2119): ok     (0m0.000s 0m0.000s)
258. ovs-ofctl dump-flows honors -F option (ovs-ofctl.at:2131): ok     (0m0.000s 0m0.000s)
259. ovs-ofctl dump-flows rejects bad -F option (ovs-ofctl.at:2143): ok     (0m0.000s 0m0.000s)
260. ovs-ofctl add-flow reports non-normalized flows (ovs-ofctl.at:2152): ok     (0m0.000s 0m0.000s)
261. ovs-ofctl dump-flows with sorting (ovs-ofctl.at:2166): ok     (0m0.000s 0m0.000s)
262. ovs-ofctl diff-flows (ovs-ofctl.at:2253): ok     (0m0.240s 0m0.452s)
263. ovs-ofctl diff-flows - suppress false differences (ovs-ofctl.at:2285): ok     (0m0.000s 0m0.000s)
264. ovs-ofctl -F and -O interaction (ovs-ofctl.at:2302): ok     (0m0.000s 0m0.000s)
265. ovs-ofctl ofp-parse (ovs-ofctl.at:2323): ok     (0m0.000s 0m0.000s)
266. OVS datapath key parsing and formatting - valid forms (odp.at:3): ok     (0m0.004s 0m0.000s)
267. OVS datapath wildcarded key parsing and formatting - valid forms (odp.at:88): ok     (0m0.004s 0m0.000s)
268. OVS datapath actions parsing and formatting - valid forms (odp.at:154): ok     (0m0.000s 0m0.000s)
269. modulo_n multipath link selection (multipath.at:10): ok     (0m1.672s 0m0.000s)
270. hash_threshold multipath link selection (multipath.at:78): ok     (0m1.672s 0m0.000s)
271. hrw multipath link selection (multipath.at:146): ok     (0m3.184s 0m0.000s)
272. iter_hash multipath link selection (multipath.at:214): ok     (0m2.024s 0m0.000s)
273. multipath action missing argument (multipath.at:282): ok     (0m0.000s 0m0.000s)
274. multipath action bad fields (multipath.at:288): ok     (0m0.000s 0m0.000s)
275. multipath action bad algorithm (multipath.at:294): ok     (0m0.000s 0m0.000s)
276. multipath action bad n_links (multipath.at:300): ok     (0m0.000s 0m0.000s)
277. multipath action destination too narrow (multipath.at:306): ok     (0m0.000s 0m0.000s)
278. learning action - parsing and formatting (learn.at:3): ok     (0m0.000s 0m0.000s)
279. learning action - parsing and formatting - illegal in_port_oxm (learn.at:18): ok     (0m0.000s 0m0.000s)
280. learning action - parsing and formatting - OXM (learn.at:27): ok     (0m0.000s 0m0.000s)
281. learning action - examples (learn.at:40): ok     (0m0.000s 0m0.000s)
282. learning action - satisfied prerequisites (learn.at:58): ok     (0m0.000s 0m0.000s)
283. learning action - invalid prerequisites (learn.at:73): ok     (0m0.000s 0m0.000s)
284. learning action - standard VLAN+MAC learning (learn.at:88): ok     (0m0.000s 0m0.000s)
285. learning action - learn refreshes hard_age (learn.at:157): ok     (0m0.000s 0m0.000s)
286. learning action - TCPv4 port learning (learn.at:226): ok     (0m0.000s 0m0.000s)
287. learning action - TCPv6 port learning (learn.at:252): ok     (0m0.000s 0m0.000s)
288. learning action - self-modifying flow (learn.at:284): ok     (0m0.000s 0m0.000s)
289. learning action - fin_timeout feature (learn.at:318): ok     (0m0.000s 0m0.000s)
290. unix vconn - refuse connection (vconn.at:21): ok     (0m0.000s 0m0.000s)
291. unix vconn - accept then close (vconn.at:21): ok     (0m0.000s 0m0.000s)
292. unix vconn - read hello (vconn.at:21): ok     (0m0.000s 0m0.000s)
293. unix vconn - send plain hello (vconn.at:21): ok     (0m0.000s 0m0.000s)
294. unix vconn - send long hello (vconn.at:21): ok     (0m0.000s 0m0.000s)
295. unix vconn - send echo hello (vconn.at:21): ok     (0m0.000s 0m0.000s)
296. unix vconn - send short hello (vconn.at:21): ok     (0m0.000s 0m0.000s)
297. unix vconn - send invalid version hello (vconn.at:21): ok     (0m0.000s 0m0.000s)
298. tcp vconn - refuse connection (vconn.at:22): ok     (0m0.000s 0m0.000s)
299. tcp vconn - accept then close (vconn.at:22): ok     (0m0.000s 0m0.000s)
300. tcp vconn - read hello (vconn.at:22): ok     (0m0.000s 0m0.000s)
301. tcp vconn - send plain hello (vconn.at:22): ok     (0m0.000s 0m0.000s)
302. tcp vconn - send long hello (vconn.at:22): ok     (0m0.000s 0m0.000s)
303. tcp vconn - send echo hello (vconn.at:22): ok     (0m0.000s 0m0.000s)
304. tcp vconn - send short hello (vconn.at:22): ok     (0m0.000s 0m0.000s)
305. tcp vconn - send invalid version hello (vconn.at:22): ok     (0m0.000s 0m0.000s)
306. ssl vconn - refuse connection (vconn.at:23): skipped (vconn.at:23)
307. ssl vconn - accept then close (vconn.at:23): skipped (vconn.at:23)
308. ssl vconn - read hello (vconn.at:23): skipped (vconn.at:23)
309. ssl vconn - send plain hello (vconn.at:23): skipped (vconn.at:23)
310. ssl vconn - send long hello (vconn.at:23): skipped (vconn.at:23)
311. ssl vconn - send echo hello (vconn.at:23): skipped (vconn.at:23)
312. ssl vconn - send short hello (vconn.at:23): skipped (vconn.at:23)
313. ssl vconn - send invalid version hello (vconn.at:23): skipped (vconn.at:23)
314. components of "/usr/lib" are "/usr", "lib" (file_name.at:12): ok     (0m0.000s 0m0.000s)
315. components of "/usr/" are "/", "usr" (file_name.at:13): ok     (0m0.000s 0m0.000s)
316. components of "usr" are ".", "usr" (file_name.at:14): ok     (0m0.000s 0m0.000s)
317. components of "/" are "/", "/" (file_name.at:15): ok     (0m0.000s 0m0.000s)
318. components of "." are ".", "." (file_name.at:16): ok     (0m0.000s 0m0.000s)
319. components of ".." are ".", ".." (file_name.at:17): ok     (0m0.000s 0m0.000s)
320. components of "//" are "//", "//" (file_name.at:18): ok     (0m0.000s 0m0.000s)
321. components of "//foo" are "//", "foo" (file_name.at:19): ok     (0m0.000s 0m0.000s)
322. components of "" are ".", "." (file_name.at:20): ok     (0m0.000s 0m0.000s)
323. components of "dir/file" are "dir", "file" (file_name.at:23): ok     (0m0.000s 0m0.000s)
324. components of "dir/file/" are "dir", "file" (file_name.at:24): ok     (0m0.000s 0m0.000s)
325. components of "dir/file//" are "dir", "file" (file_name.at:25): ok     (0m0.000s 0m0.000s)
326. components of "///foo" are "/", "foo" (file_name.at:26): ok     (0m0.000s 0m0.000s)
327. follow_symlinks - relative symlinks (file_name.at:36): ok     (0m0.000s 0m0.000s)
328. follow_symlinks - absolute symlinks (file_name.at:53): ok     (0m0.000s 0m0.000s)
329. follow_symlinks - symlinks to directories (file_name.at:70): ok     (0m0.000s 0m0.000s)
330. follow_symlinks - nonexistent targets (file_name.at:83): ok     (0m0.000s 0m0.000s)
331. follow_symlinks - regular files (file_name.at:91): ok     (0m0.000s 0m0.000s)
332. follow_symlinks - device targets (file_name.at:96): ok     (0m0.000s 0m0.000s)
333. follow_symlinks - nonexistent files (file_name.at:105): ok     (0m0.000s 0m0.000s)
334. follow_symlinks - symlink loop (file_name.at:112): ok     (0m0.000s 0m0.000s)
335. wikipedia test vector 1 (aes128.at:10): ok     (0m0.000s 0m0.000s)
336. wikipedia test vector 2 (aes128.at:16): ok     (0m0.000s 0m0.000s)
337. NIST KAT ECBKeySbox128e vector 0 (aes128.at:22): ok     (0m0.000s 0m0.000s)
338. NIST KAT ECBKeySbox128e vector 1 (aes128.at:28): ok     (0m0.000s 0m0.000s)
339. NIST KAT ECBKeySbox128e vector 2 (aes128.at:34): ok     (0m0.000s 0m0.000s)
340. NIST KAT ECBKeySbox128e vector 3 (aes128.at:40): ok     (0m0.000s 0m0.000s)
341. NIST KAT ECBKeySbox128e vector 4 (aes128.at:46): ok     (0m0.000s 0m0.000s)
342. NIST KAT ECBKeySbox128e vector 5 (aes128.at:52): ok     (0m0.000s 0m0.000s)
343. NIST KAT ECBKeySbox128e vector 6 (aes128.at:58): ok     (0m0.000s 0m0.000s)
344. NIST KAT ECBKeySbox128e vector 7 (aes128.at:64): ok     (0m0.000s 0m0.000s)
345. NIST KAT ECBKeySbox128e vector 8 (aes128.at:70): ok     (0m0.000s 0m0.000s)
346. NIST KAT ECBKeySbox128e vector 9 (aes128.at:76): ok     (0m0.000s 0m0.000s)
347. NIST KAT ECBKeySbox128e vector 10 (aes128.at:82): ok     (0m0.000s 0m0.000s)
348. NIST KAT ECBKeySbox128e vector 11 (aes128.at:88): ok     (0m0.000s 0m0.000s)
349. NIST KAT ECBKeySbox128e vector 12 (aes128.at:94): ok     (0m0.000s 0m0.000s)
350. NIST KAT ECBKeySbox128e vector 13 (aes128.at:100): ok     (0m0.000s 0m0.000s)
351. NIST KAT ECBKeySbox128e vector 14 (aes128.at:106): ok     (0m0.000s 0m0.000s)
352. NIST KAT ECBKeySbox128e vector 15 (aes128.at:112): ok     (0m0.000s 0m0.000s)
353. NIST KAT ECBKeySbox128e vector 16 (aes128.at:118): ok     (0m0.000s 0m0.000s)
354. NIST KAT ECBKeySbox128e vector 17 (aes128.at:124): ok     (0m0.000s 0m0.000s)
355. NIST KAT ECBKeySbox128e vector 18 (aes128.at:130): ok     (0m0.000s 0m0.000s)
356. NIST KAT ECBKeySbox128e vector 19 (aes128.at:136): ok     (0m0.000s 0m0.000s)
357. NIST KAT ECBKeySbox128e vector 20 (aes128.at:142): ok     (0m0.000s 0m0.000s)
358. unixctl ovs-vswitchd exit - Python (unixctl-py.at:6): ok     (0m0.140s 0m0.008s)
359. unixctl ovs-vswitchd help - Python (unixctl-py.at:17): ok     (0m0.164s 0m0.016s)
360. unixctl ovs-vswitchd arguments - Python (unixctl-py.at:32): ok     (0m0.460s 0m0.060s)
361. unixctl bad target - Python (unixctl-py.at:74): ok     (0m0.112s 0m0.032s)
362. unixctl server - Python (unixctl-py.at:91): ok     (0m0.484s 0m0.104s)
363. unixctl server errors - Python (unixctl-py.at:165): ok     (0m0.064s 0m0.012s)
364. UUID generation, parsing, serialization (uuid.at:15): ok     (0m0.028s 0m0.036s)
365. empty array - C (json.at:65): ok     (0m0.000s 0m0.000s)
366. empty array - Python (json.at:65): ok     (0m0.012s 0m0.008s)
367. single-element array - C (json.at:66): ok     (0m0.000s 0m0.000s)
368. single-element array - Python (json.at:66): ok     (0m0.008s 0m0.008s)
369. 2-element array - C (json.at:67): ok     (0m0.000s 0m0.000s)
370. 2-element array - Python (json.at:67): ok     (0m0.008s 0m0.008s)
371. many-element array - C (json.at:68): ok     (0m0.000s 0m0.000s)
372. many-element array - Python (json.at:68): ok     (0m0.008s 0m0.008s)
373. missing comma - C (json.at:71): ok     (0m0.000s 0m0.000s)
374. missing comma - Python (json.at:71): ok     (0m0.012s 0m0.008s)
375. trailing comma not allowed - C (json.at:73): ok     (0m0.000s 0m0.000s)
376. trailing comma not allowed - Python (json.at:73): ok     (0m0.012s 0m0.004s)
377. doubled comma not allowed - C (json.at:75): ok     (0m0.000s 0m0.000s)
378. doubled comma not allowed - Python (json.at:75): ok     (0m0.012s 0m0.004s)
379. empty string - C (json.at:80): ok     (0m0.000s 0m0.000s)
380. empty string - Python (json.at:80): ok     (0m0.008s 0m0.008s)
381. 1-character strings - C (json.at:81): ok     (0m0.000s 0m0.000s)
382. 1-character strings - Python (json.at:81): ok     (0m0.012s 0m0.004s)
383. escape sequences - C (json.at:84): ok     (0m0.000s 0m0.000s)
384. escape sequences - Python (json.at:84): ok     (0m0.012s 0m0.008s)
385. Unicode escape sequences - C (json.at:87): ok     (0m0.000s 0m0.000s)
386. Unicode escape sequences - Python (json.at:87): ok     (0m0.012s 0m0.004s)
387. surrogate pairs - C (json.at:90): ok     (0m0.000s 0m0.000s)
388. surrogate pairs - Python (json.at:93): ok     (0m0.012s 0m0.004s)
389. a string by itself is not valid JSON - C (json.at:96): ok     (0m0.000s 0m0.000s)
390. a string by itself is not valid JSON - Python (json.at:96): ok     (0m0.004s 0m0.012s)
391. end of line in quoted string - C (json.at:98): ok     (0m0.000s 0m0.000s)
392. end of line in quoted string - Python (json.at:98): ok     (0m0.012s 0m0.004s)
393. formfeed in quoted string - C (json.at:102): ok     (0m0.000s 0m0.000s)
394. formfeed in quoted string - Python (json.at:102): ok     (0m0.016s 0m0.000s)
395. bad escape in quoted string - C (json.at:105): ok     (0m0.000s 0m0.000s)
396. bad escape in quoted string - Python (json.at:105): ok     (0m0.012s 0m0.004s)
397. \u must be followed by 4 hex digits (1) - C (json.at:108): ok     (0m0.000s 0m0.000s)
398. \u must be followed by 4 hex digits (1) - Python (json.at:108): ok     (0m0.012s 0m0.004s)
399. \u must be followed by 4 hex digits (2) - C (json.at:111): ok     (0m0.000s 0m0.000s)
400. \u must be followed by 4 hex digits (2) - Python (json.at:111): ok     (0m0.012s 0m0.004s)
401. isolated leading surrogate not allowed - C (json.at:114): ok     (0m0.000s 0m0.000s)
402. isolated leading surrogate not allowed - Python (json.at:114): ok     (0m0.012s 0m0.004s)
403. surrogatess must paired properly - C (json.at:117): ok     (0m0.000s 0m0.000s)
404. surrogatess must paired properly - Python (json.at:117): ok     (0m0.012s 0m0.004s)
405. null bytes not allowed - C (json.at:120): ok     (0m0.000s 0m0.000s)
406. null bytes not allowed - Python (json.at:120): ok     (0m0.008s 0m0.008s)
407. end of input in quoted string - C (json.at:124): ok     (0m0.000s 0m0.000s)
408. end of input in quoted string - Python (json.at:131): ok     (0m0.016s 0m0.000s)
409. empty object - C (json.at:142): ok     (0m0.000s 0m0.000s)
410. empty object - Python (json.at:142): ok     (0m0.016s 0m0.000s)
411. simple object - C (json.at:143): ok     (0m0.000s 0m0.000s)
412. simple object - Python (json.at:143): ok     (0m0.016s 0m0.004s)
413. bad value - C (json.at:146): ok     (0m0.000s 0m0.000s)
414. bad value - Python (json.at:146): ok     (0m0.016s 0m0.000s)
415. missing colon - C (json.at:148): ok     (0m0.000s 0m0.000s)
416. missing colon - Python (json.at:148): ok     (0m0.008s 0m0.008s)
417. missing comma - C (json.at:150): ok     (0m0.000s 0m0.000s)
418. missing comma - Python (json.at:150): ok     (0m0.012s 0m0.004s)
419. trailing comma not allowed - C (json.at:152): ok     (0m0.000s 0m0.000s)
420. trailing comma not allowed - Python (json.at:152): ok     (0m0.012s 0m0.004s)
421. doubled comma not allowed - C (json.at:155): ok     (0m0.000s 0m0.000s)
422. doubled comma not allowed - Python (json.at:155): ok     (0m0.012s 0m0.004s)
423. names must be strings - C (json.at:158): ok     (0m0.000s 0m0.000s)
424. names must be strings - Python (json.at:158): ok     (0m0.004s 0m0.012s)
425. null - C (json.at:164): ok     (0m0.000s 0m0.000s)
426. null - Python (json.at:164): ok     (0m0.012s 0m0.004s)
427. false - C (json.at:165): ok     (0m0.000s 0m0.000s)
428. false - Python (json.at:165): ok     (0m0.016s 0m0.004s)
429. true - C (json.at:166): ok     (0m0.000s 0m0.000s)
430. true - Python (json.at:166): ok     (0m0.012s 0m0.004s)
431. a literal by itself is not valid JSON - C (json.at:167): ok     (0m0.000s 0m0.000s)
432. a literal by itself is not valid JSON - Python (json.at:167): ok     (0m0.012s 0m0.004s)
433. nullify is invalid - C (json.at:169): ok     (0m0.000s 0m0.000s)
434. nullify is invalid - Python (json.at:169): ok     (0m0.008s 0m0.008s)
435. nubs is invalid - C (json.at:171): ok     (0m0.000s 0m0.000s)
436. nubs is invalid - Python (json.at:171): ok     (0m0.012s 0m0.004s)
437. xxx is invalid - C (json.at:173): ok     (0m0.000s 0m0.000s)
438. xxx is invalid - Python (json.at:173): ok     (0m0.012s 0m0.004s)
439. integers expressed as reals - C (json.at:178): ok     (0m0.000s 0m0.000s)
440. integers expressed as reals - Python (json.at:178): ok     (0m0.016s 0m0.004s)
441. large integers - C (json.at:188): ok     (0m0.000s 0m0.000s)
442. large integers - Python (json.at:188): ok     (0m0.012s 0m0.008s)
443. large integers expressed as reals - C (json.at:192): ok     (0m0.000s 0m0.000s)
444. large integers expressed as reals - Python (json.at:192): ok     (0m0.012s 0m0.004s)
445. large integers that overflow to reals - C (json.at:200): ok     (0m0.000s 0m0.000s)
446. large integers that overflow to reals - Python (json.at:200): ok     (0m0.004s 0m0.012s)
447. negative zero - C (json.at:205): ok     (0m0.000s 0m0.000s)
448. negative zero - Python (json.at:205): ok     (0m0.012s 0m0.008s)
449. reals - C (json.at:210): ok     (0m0.000s 0m0.000s)
450. reals - Python (json.at:210): ok     (0m0.016s 0m0.004s)
451. scientific notation - C (json.at:214): ok     (0m0.000s 0m0.000s)
452. scientific notation - Python (json.at:214): ok     (0m0.008s 0m0.008s)
453. +/- DBL_MAX - C (json.at:221): ok     (0m0.000s 0m0.000s)
454. +/- DBL_MAX - Python (json.at:221): ok     (0m0.012s 0m0.004s)
455. negative reals - C (json.at:226): ok     (0m0.000s 0m0.000s)
456. negative reals - Python (json.at:226): ok     (0m0.012s 0m0.008s)
457. negative scientific notation - C (json.at:230): ok     (0m0.000s 0m0.000s)
458. negative scientific notation - Python (json.at:230): ok     (0m0.012s 0m0.004s)
459. 1e-9999 underflows to 0 - C (json.at:234): ok     (0m0.000s 0m0.000s)
460. 1e-9999 underflows to 0 - Python (json.at:234): ok     (0m0.012s 0m0.004s)
461. a number by itself is not valid JSON - C (json.at:238): ok     (0m0.000s 0m0.000s)
462. a number by itself is not valid JSON - Python (json.at:238): ok     (0m0.012s 0m0.004s)
463. leading zeros not allowed - C (json.at:240): ok     (0m0.000s 0m0.000s)
464. leading zeros not allowed - Python (json.at:240): ok     (0m0.008s 0m0.008s)
465. 1e9999 is too big - C (json.at:244): ok     (0m0.000s 0m0.000s)
466. 1e9999 is too big - Python (json.at:244): ok     (0m0.012s 0m0.004s)
467. exponent bigger than INT_MAX - C (json.at:248): ok     (0m0.000s 0m0.000s)
468. exponent bigger than INT_MAX - Python (json.at:248): ok     (0m0.004s 0m0.012s)
469. decimal point must be followed by digit - C (json.at:252): ok     (0m0.000s 0m0.000s)
470. decimal point must be followed by digit - Python (json.at:252): ok     (0m0.008s 0m0.012s)
471. exponent must contain at least one digit (1) - C (json.at:256): ok     (0m0.000s 0m0.000s)
472. exponent must contain at least one digit (1) - Python (json.at:256): ok     (0m0.016s 0m0.004s)
473. exponent must contain at least one digit (2) - C (json.at:260): ok     (0m0.000s 0m0.000s)
474. exponent must contain at least one digit (2) - Python (json.at:260): ok     (0m0.008s 0m0.012s)
475. exponent must contain at least one digit (3) - C (json.at:264): ok     (0m0.000s 0m0.000s)
476. exponent must contain at least one digit (3) - Python (json.at:264): ok     (0m0.008s 0m0.012s)
477. RFC 4267 object example - C (json.at:271): ok     (0m0.000s 0m0.000s)
478. RFC 4267 object example - Python (json.at:271): ok     (0m0.012s 0m0.008s)
479. RFC 4267 array example - C (json.at:287): ok     (0m0.000s 0m0.000s)
480. RFC 4267 array example - Python (json.at:287): ok     (0m0.008s 0m0.012s)
481. trailing garbage - C (json.at:314): ok     (0m0.000s 0m0.000s)
482. trailing garbage - Python (json.at:314): ok     (0m0.008s 0m0.008s)
483. formfeeds are not valid white space - C (json.at:316): ok     (0m0.000s 0m0.000s)
484. formfeeds are not valid white space - Python (json.at:316): ok     (0m0.008s 0m0.008s)
485. ';' is not a valid token - C (json.at:318): ok     (0m0.000s 0m0.000s)
486. ';' is not a valid token - Python (json.at:318): ok     (0m0.016s 0m0.000s)
487. arrays nesting too deep - C (json.at:320): ok     (0m0.000s 0m0.000s)
488. arrays nesting too deep - Python (json.at:320): ok     (0m0.016s 0m0.008s)
489. objects nesting too deep - C (json.at:324): ok     (0m0.000s 0m0.000s)
490. objects nesting too deep - Python (json.at:324): ok     (0m0.028s 0m0.004s)
491. input may not be empty (json.at:329): ok     (0m0.000s 0m0.000s)
492. multiple adjacent objects - C (json.at:337): ok     (0m0.000s 0m0.000s)
493. multiple adjacent objects - Python (json.at:337): ok     (0m0.016s 0m0.000s)
494. multiple space-separated objects - C (json.at:342): ok     (0m0.000s 0m0.000s)
495. multiple space-separated objects - Python (json.at:342): ok     (0m0.008s 0m0.008s)
496. multiple objects on separate lines - C (json.at:347): ok     (0m0.000s 0m0.000s)
497. multiple objects on separate lines - Python (json.at:347): ok     (0m0.012s 0m0.008s)
498. multiple objects and arrays - C (json.at:354): ok     (0m0.000s 0m0.000s)
499. multiple objects and arrays - Python (json.at:354): ok     (0m0.008s 0m0.012s)
500. garbage between multiple objects - C (json.at:360): ok     (0m0.000s 0m0.000s)
501. garbage between multiple objects - Python (json.at:360): ok     (0m0.008s 0m0.012s)
502. garbage after multiple objects - C (json.at:364): ok     (0m0.000s 0m0.000s)
503. garbage after multiple objects - Python (json.at:364): ok     (0m0.012s 0m0.004s)
504. JSON-RPC request and successful reply (jsonrpc.at:3): ok     (0m0.000s 0m0.000s)
505. JSON-RPC request and error reply (jsonrpc.at:15): ok     (0m0.000s 0m0.000s)
506. JSON-RPC notification (jsonrpc.at:27): ok     (0m0.000s 0m0.000s)
507. JSON-RPC request and successful reply - Python (jsonrpc-py.at:3): ok     (0m0.124s 0m0.024s)
508. JSON-RPC request and error reply - Python (jsonrpc-py.at:16): ok     (0m0.124s 0m0.028s)
509. JSON-RPC notification - Python (jsonrpc-py.at:29): ok     (0m0.144s 0m0.012s)
510. check that time advances (timeval.at:3): ok     (0m0.000s 0m0.000s)
511. check that time advances after daemonize() (timeval.at:8): ok     (0m0.000s 0m0.000s)
512. tunnel - input (tunnel.at:3): ok     (0m0.004s 0m0.004s)
513. tunnel - ECN decapsulation (tunnel.at:64): ok     (0m0.004s 0m0.000s)
514. tunnel - output (tunnel.at:107): ok     (0m0.000s 0m0.000s)
515. tunnel - ToS and TTL inheritance (tunnel.at:139): ok     (0m0.000s 0m0.000s)
516. tunnel - set_tunnel (tunnel.at:177): ok     (0m0.000s 0m0.000s)
517. tunnel - key (tunnel.at:211): ok     (0m0.000s 0m0.000s)
518. tunnel - key match (tunnel.at:260): ok     (0m0.000s 0m0.000s)
519. tunnel - VXLAN (tunnel.at:309): ok     (0m0.000s 0m0.000s)
520. tunnel - LISP (tunnel.at:321): ok     (0m0.000s 0m0.000s)
521. tunnel - different VXLAN UDP port (tunnel.at:333): ok     (0m0.000s 0m0.000s)
522. ofproto-dpif - set_field - tun_src/tun_dst/tun_id (tunnel.at:362): ok     (0m0.000s 0m0.000s)
523. lock and unlock (lockfile.at:12): ok     (0m0.000s 0m0.000s)
524. lock and unlock twice (lockfile.at:14): ok     (0m0.000s 0m0.000s)
525. lock blocks same process (lockfile.at:16): ok     (0m0.000s 0m0.000s)
526. lock blocks same process twice (lockfile.at:20): ok     (0m0.000s 0m0.000s)
527. lock blocks other process (lockfile.at:25): ok     (0m0.000s 0m0.000s)
528. lock twice blocks other process (lockfile.at:30): ok     (0m0.000s 0m0.000s)
529. lock and unlock allows other process (lockfile.at:36): ok     (0m0.000s 0m0.000s)
530. lock multiple (lockfile.at:38): ok     (0m0.000s 0m0.000s)
531. lock symlink (lockfile.at:42): ok     (0m0.000s 0m0.000s)
532. lock symlink to dir (lockfile.at:49): ok     (0m0.000s 0m0.000s)
533. nothing happens if not enabled - C (reconnect.at:26): ok     (0m0.000s 0m0.000s)
534. nothing happens if not enabled - Python (reconnect.at:26): ok     (0m0.024s 0m0.012s)
535. quick connect, idle disconnect - C (reconnect.at:37): ok     (0m0.000s 0m0.000s)
536. quick connect, idle disconnect - Python (reconnect.at:37): ok     (0m0.028s 0m0.008s)
537. slow connect, idle disconnect - C (reconnect.at:93): ok     (0m0.000s 0m0.000s)
538. slow connect, idle disconnect - Python (reconnect.at:93): ok     (0m0.028s 0m0.008s)
539. connect backs off - C (reconnect.at:163): ok     (0m0.000s 0m0.000s)
540. connect backs off - Python (reconnect.at:163): ok     (0m0.032s 0m0.004s)
541. connections with no data preserve backoff - C (reconnect.at:362): ok     (0m0.000s 0m0.000s)
542. connections with no data preserve backoff - Python (reconnect.at:362): ok     (0m0.032s 0m0.004s)
543. brief connection preserves backoff - C (reconnect.at:526): ok     (0m0.000s 0m0.000s)
544. brief connection preserves backoff - Python (reconnect.at:526): ok     (0m0.032s 0m0.004s)
545. brief connection with data preserves backoff - C (reconnect.at:657): ok     (0m0.000s 0m0.000s)
546. brief connection with data preserves backoff - Python (reconnect.at:657): ok     (0m0.028s 0m0.008s)
547. long connection resets backoff - C (reconnect.at:818): ok     (0m0.000s 0m0.000s)
548. long connection resets backoff - Python (reconnect.at:818): ok     (0m0.028s 0m0.008s)
549. connection attempt fails quickly - C (reconnect.at:979): ok     (0m0.000s 0m0.000s)
550. connection attempt fails quickly - Python (reconnect.at:979): ok     (0m0.024s 0m0.012s)
551. max-tries of 1 honored - C (reconnect.at:1034): ok     (0m0.000s 0m0.000s)
552. max-tries of 1 honored - Python (reconnect.at:1034): ok     (0m0.024s 0m0.012s)
553. max-tries of 0 honored - C (reconnect.at:1094): ok     (0m0.000s 0m0.000s)
554. max-tries of 0 honored - Python (reconnect.at:1094): ok     (0m0.032s 0m0.004s)
555. passive mode - C (reconnect.at:1110): ok     (0m0.000s 0m0.000s)
556. passive mode - Python (reconnect.at:1110): ok     (0m0.028s 0m0.008s)
557. ovs-vswitchd detaches correctly with empty db (ovs-vswitchd.at:7): ok     (0m0.000s 0m0.000s)
558. ofproto - echo request (ofproto.at:3): ok     (0m0.000s 0m0.000s)
559. ofproto - feature request, config request (ofproto.at:9): ok     (0m0.000s 0m0.000s)
560. ofproto - set OpenFlow port number (ofproto.at:26): ok     (0m0.000s 0m0.000s)
561. ofproto - port stats - (OpenFlow 1.0) (ofproto.at:59): ok     (0m0.000s 0m0.000s)
562. ofproto - port stats - (OpenFlow 1.2) (ofproto.at:70): ok     (0m0.000s 0m0.000s)
563. ofproto - port-desc stats (OpenFlow 1.0) (ofproto.at:83): ok     (0m0.000s 0m0.000s)
564. ofproto - port-desc stats (OpenFlow 1.2) (ofproto.at:98): ok     (0m0.000s 0m0.000s)
565. ofproto - queue stats - (OpenFlow 1.0) (ofproto.at:113): ok     (0m0.000s 0m0.000s)
566. ofproto - queue stats - (OpenFlow 1.2) (ofproto.at:130): ok     (0m0.000s 0m0.000s)
567. ofproto - mod-port (OpenFlow 1.0) (ofproto.at:147): ok     (0m0.000s 0m0.000s)
568. ofproto - mod-port (OpenFlow 1.2) (ofproto.at:181): ok     (0m0.000s 0m0.000s)
569. ofproto - basic flow_mod commands (NXM) (ofproto.at:212): ok     (0m0.000s 0m0.000s)
570. ofproto - basic flow_mod commands (OpenFlow 1.0) (ofproto.at:234): ok     (0m0.000s 0m0.000s)
571. ofproto - basic flow_mod commands (OpenFlow 1.1) (ofproto.at:256): ok     (0m0.000s 0m0.000s)
572. ofproto - set-field flow_mod commands (NXM) (ofproto.at:278): ok     (0m0.000s 0m0.000s)
573. ofproto - basic flow_mod commands (OpenFlow 1.2) (ofproto.at:289): ok     (0m0.000s 0m0.000s)
574. ofproto - dump flows with cookie (ofproto.at:308): ok     (0m0.000s 0m0.000s)
575. ofproto - mod flow with cookie change (OpenFlow 1.0) (ofproto.at:332): ok     (0m0.000s 0m0.000s)
576. ofproto - mod flow with cookie change (NXM) (ofproto.at:348): ok     (0m0.000s 0m0.000s)
577. ofproto - no mod flow with cookie change (OpenFlow 1.1) (ofproto.at:364): ok     (0m0.000s 0m0.000s)
578. ofproto - no mod flow with cookie change (OpenFlow 1.2) (ofproto.at:380): ok     (0m0.000s 0m0.000s)
579. ofproto - mod flows based on cookie mask (OpenFlow 1.0) (ofproto.at:396): ok     (0m0.000s 0m0.000s)
580. ofproto - mod flows based on cookie mask (OpenFlow 1.1) (ofproto.at:418): ok     (0m0.000s 0m0.000s)
581. ofproto - mod flows based on cookie mask (OpenFlow 1.2) (ofproto.at:440): ok     (0m0.000s 0m0.000s)
582. ofproto - mod flows based on cookie mask with cookie change (ofproto.at:463): ok     (0m0.000s 0m0.000s)
583. ofproto - mod flow with cookie miss (mask==0) - NXM (ofproto.at:485): ok     (0m0.000s 0m0.000s)
584. ofproto - mod flow with cookie miss (mask==0) - OF1.1 (ofproto.at:495): ok     (0m0.000s 0m0.000s)
585. ofproto - mod flow with cookie miss (mask==0) - OF1.2 (ofproto.at:505): ok     (0m0.000s 0m0.000s)
586. ofproto - mod flow with cookie miss (mask!=0) - NXM (ofproto.at:514): ok     (0m0.000s 0m0.000s)
587. ofproto - mod flow with cookie miss (mask!=0) - OF1.1 (ofproto.at:523): ok     (0m0.000s 0m0.000s)
588. ofproto - mod flow with cookie miss (mask!=0) - OF1.2 (ofproto.at:532): ok     (0m0.000s 0m0.000s)
589. ofproto - del flows with cookies (ofproto.at:541): ok     (0m0.000s 0m0.000s)
590. ofproto - del flows based on cookie (ofproto.at:560): ok     (0m0.000s 0m0.000s)
591. ofproto - del flows based on cookie mask (ofproto.at:581): ok     (0m0.000s 0m0.000s)
592. ofproto - del flows based on table id (NXM) (ofproto.at:600): ok     (0m0.000s 0m0.000s)
593. ofproto - del flows based on table id (OpenFlow 1.1) (ofproto.at:632): ok     (0m0.000s 0m0.000s)
594. ofproto - del flows based on table id (OpenFlow 1.2) (ofproto.at:664): ok     (0m0.000s 0m0.000s)
595. ofproto - flow table configuration (OpenFlow 1.0) (ofproto.at:696): ok     (0m0.024s 0m0.028s)
596. ofproto - flow table configuration (OpenFlow 1.2) (ofproto.at:732): ok     (0m0.020s 0m0.040s)
597. ofproto - hard limits on flow table size (OpenFLow 1.0) (ofproto.at:774): ok     (0m0.000s 0m0.004s)
598. ofproto - hard limits on flow table size (OpenFLow 1.2) (ofproto.at:818): ok     (0m0.004s 0m0.000s)
599. ofproto - eviction upon table overflow (OpenFlow 1.0) (ofproto.at:857): ok     (0m0.004s 0m0.000s)
600. ofproto - eviction upon table overflow (OpenFlow 1.2) (ofproto.at:915): ok     (0m0.000s 0m0.004s)
601. ofproto - eviction upon table overflow, with fairness (OpenFlow 1.0) (ofproto.at:974): ok     (0m0.004s 0m0.000s)
602. ofproto - eviction upon table overflow, with fairness (OpenFlow 1.2) (ofproto.at:1056): ok     (0m0.004s 0m0.000s)
603. ofproto - asynchronous message control (OpenFlow 1.0) (ofproto.at:1138): ok     (0m0.000s 0m0.000s)
604. ofproto - asynchronous message control (OpenFlow 1.2) (ofproto.at:1241): ok     (0m0.000s 0m0.000s)
605. ofproto - asynchronous message control (OpenFlow 1.3) (ofproto.at:1345): ok     (0m0.000s 0m0.000s)
606. ofproto - controller role (OpenFlow 1.2) (ofproto.at:1447): ok     (0m0.000s 0m0.000s)
607. ofproto - packet-out from controller (OpenFlow 1.0) (ofproto.at:1488): ok     (0m0.000s 0m0.000s)
608. ofproto - packet-out from controller (OpenFlow 1.2) (ofproto.at:1524): ok     (0m0.000s 0m0.000s)
609. ofproto - packet-out with metadata (NXM) (ofproto.at:1555): ok     (0m0.000s 0m0.000s)
610. ofproto - packet-out with metadata (OpenFlow 1.2) (ofproto.at:1583): ok     (0m0.000s 0m0.000s)
611. ofproto - packet-out with tunnel metadata (OpenFlow 1.2) (ofproto.at:1610): ok     (0m0.000s 0m0.000s)
612. ofproto - flow monitoring (ofproto.at:1636): ok     (0m0.000s 0m0.004s)
613. ofproto - flow monitoring pause and resume (ofproto.at:1784): ok     (0m0.144s 0m0.076s)
614. ofproto-dpif - resubmit (ofproto-dpif.at:3): ok     (0m0.004s 0m0.000s)
615. ofproto-dpif - goto table (ofproto-dpif.at:23): ok     (0m0.000s 0m0.016s)
616. ofproto-dpif - registers (ofproto-dpif.at:37): ok     (0m0.000s 0m0.004s)
617. ofproto-dpif - push-pop (ofproto-dpif.at:72): ok     (0m0.000s 0m0.000s)
618. ofproto-dpif - output (ofproto-dpif.at:91): ok     (0m0.000s 0m0.000s)
619. ofproto-dpif - dec_ttl (ofproto-dpif.at:112): ok     (0m0.000s 0m0.004s)
620. ofproto-dpif - output, OFPP_NONE ingress port (ofproto-dpif.at:147): ok     (0m0.000s 0m0.004s)
621. ofproto-dpif - DSCP (ofproto-dpif.at:165): ok     (0m0.004s 0m0.000s)
622. ofproto-dpif - output/flood flags (ofproto-dpif.at:192): ok     (0m0.004s 0m0.008s)
623. ofproto-dpif - controller (ofproto-dpif.at:250): ok     (0m0.024s 0m0.052s)
624. ofproto-dpif - VLAN handling (ofproto-dpif.at:715): ok     (0m0.004s 0m0.008s)
625. ofproto-dpif - fragment handling (ofproto-dpif.at:849): ok     (0m0.004s 0m0.000s)
626. ofproto-dpif - exit (ofproto-dpif.at:895): ok     (0m0.000s 0m0.000s)
627. ofproto-dpif - mirroring, select_all (ofproto-dpif.at:920): ok     (0m0.000s 0m0.000s)
628. ofproto-dpif - mirroring, select_src (ofproto-dpif.at:950): ok     (0m0.000s 0m0.000s)
629. ofproto-dpif - mirroring, OFPP_NONE ingress port (ofproto-dpif.at:978): ok     (0m0.004s 0m0.000s)
630. ofproto-dpif - mirroring, select_dst (ofproto-dpif.at:999): ok     (0m0.000s 0m0.004s)
631. ofproto-dpif - mirroring, select_vlan (ofproto-dpif.at:1029): ok     (0m0.000s 0m0.000s)
632. ofproto-dpif - mirroring, output_port (ofproto-dpif.at:1064): ok     (0m0.000s 0m0.000s)
633. ofproto-dpif - mirroring, output_vlan (ofproto-dpif.at:1093): ok     (0m0.000s 0m0.000s)
634. ofproto-dpif - ofproto/trace command 1 (ofproto-dpif.at:1131): ok     (0m0.000s 0m0.000s)
635. ofproto-dpif - ofproto/trace command 2 (ofproto-dpif.at:1267): ok     (0m0.000s 0m0.000s)
636. ofproto-dpif - MAC learning (ofproto-dpif.at:1394): ok     (0m0.004s 0m0.000s)
637. ofproto-dpif - MAC table overflow (ofproto-dpif.at:1483): ok     (0m0.004s 0m0.004s)
638. ofproto-dpif - sFlow packet sampling (ofproto-dpif.at:1544): ok     (0m0.004s 0m0.004s)
639. ofproto-dpif - NetFlow flow expiration (ofproto-dpif.at:1839): ok     (0m0.000s 0m0.012s)
640. ofproto-dpif - NetFlow active expiration (ofproto-dpif.at:1880): ok     (0m0.008s 0m0.016s)
641. idle_age and hard_age increase over time (ofproto-dpif.at:1961): ok     (0m0.008s 0m0.004s)
642. ofproto-dpif - fin_timeout (ofproto-dpif.at:2051): ok     (0m0.004s 0m0.000s)
643. ofproto-dpif - ovs-appctl dpif/dump-dps (ofproto-dpif.at:2086): ok     (0m0.000s 0m0.000s)
644. ofproto-dpif - ovs-appctl dpif/show (ofproto-dpif.at:2098): ok     (0m0.000s 0m0.000s)
645. ofproto-dpif - ovs-appctl dpif/dump-flows (ofproto-dpif.at:2118): ok     (0m0.000s 0m0.000s)
646. ofproto-dpif - ovs-appctl dpif/del-flows (ofproto-dpif.at:2140): ok     (0m0.000s 0m0.000s)
647. ofproto-dpif - patch ports (ofproto-dpif.at:2170): ok     (0m0.008s 0m0.000s)
648. ofproto-dpif - ovs-appctl dpif/show rates (ofproto-dpif.at:2232): ok     (0m0.020s 0m0.000s)
649. ofproto-dpif - port duration (ofproto-dpif.at:2262): ok     (0m0.000s 0m0.000s)
650. ofproto-dpif megaflow - port classification (ofproto-dpif.at:2298): ok     (0m0.000s 0m0.000s)
651. ofproto-dpif megaflow - L2 classification (ofproto-dpif.at:2313): ok     (0m0.004s 0m0.000s)
652. ofproto-dpif megaflow - L3 classification (ofproto-dpif.at:2329): ok     (0m0.000s 0m0.000s)
653. ofproto-dpif megaflow - L4 classification (ofproto-dpif.at:2345): ok     (0m0.000s 0m0.004s)
654. ofproto-dpif megaflow - normal (ofproto-dpif.at:2360): ok     (0m0.000s 0m0.008s)
655. ofproto-dpif megaflow - mpls (ofproto-dpif.at:2373): ok     (0m0.004s 0m0.000s)
656. ofproto-dpif megaflow - netflow (ofproto-dpif.at:2390): ok     (0m0.004s 0m0.000s)
657. ofproto-dpif megaflow - normal, active-backup bonding (ofproto-dpif.at:2414): ok     (0m0.000s 0m0.004s)
658. ofproto-dpif megaflow - normal, balance-slb bonding (ofproto-dpif.at:2433): ok     (0m0.000s 0m0.004s)
659. ofproto-dpif megaflow - normal, balance-tcp bonding (ofproto-dpif.at:2452): ok     (0m0.000s 0m0.008s)
660. ofproto-dpif megaflow - resubmit port action (ofproto-dpif.at:2488): ok     (0m0.004s 0m0.004s)
661. ofproto-dpif megaflow - resubmit table action (ofproto-dpif.at:2505): ok     (0m0.004s 0m0.004s)
662. ofproto-dpif megaflow - goto_table action (ofproto-dpif.at:2523): ok     (0m0.000s 0m0.004s)
663. ofproto-dpif megaflow - mirroring, select_all (ofproto-dpif.at:2540): ok     (0m0.000s 0m0.004s)
664. ofproto-dpif megaflow - mirroring, select_vlan (ofproto-dpif.at:2560): ok     (0m0.000s 0m0.004s)
665. ofproto-dpif megaflow - move action (ofproto-dpif.at:2581): ok     (0m0.000s 0m0.000s)
666. ofproto-dpif megaflow - push action (ofproto-dpif.at:2599): ok     (0m0.000s 0m0.008s)
667. ofproto-dpif megaflow - learning (ofproto-dpif.at:2615): ok     (0m0.004s 0m0.004s)
668. ofproto-dpif megaflow - tunnels (ofproto-dpif.at:2639): ok     (0m0.008s 0m0.000s)
669. ofproto-dpif megaflow - dec_ttl (ofproto-dpif.at:2668): ok     (0m0.004s 0m0.004s)
670. ofproto-dpif megaflow - set dl_dst (ofproto-dpif.at:2684): ok     (0m0.000s 0m0.004s)
671. ofproto-dpif - datapath port number change (ofproto-dpif.at:2710): ok     (0m0.000s 0m0.000s)
672. ofproto - bundle with variable bfd/cfm config (ofproto-dpif.at:2732): ok     (0m0.000s 0m0.036s)
673. VLAN splinters (vlan-splinters.at:3): ok     (0m0.004s 0m0.000s)
674. create empty, reread (ovsdb-log.at:3): ok     (0m0.000s 0m0.000s)
675. write one, reread (ovsdb-log.at:18): ok     (0m0.000s 0m0.000s)
676. check that create fails if file exists (ovsdb-log.at:35): ok     (0m0.000s 0m0.000s)
677. write one, reread (ovsdb-log.at:55): ok     (0m0.000s 0m0.000s)
678. write one, reread, append (ovsdb-log.at:76): ok     (0m0.000s 0m0.000s)
679. write, reread one, overwrite (ovsdb-log.at:106): ok     (0m0.000s 0m0.000s)
680. write, add corrupted data, read (ovsdb-log.at:132): ok     (0m0.000s 0m0.000s)
681. write, add corrupted data, read, overwrite (ovsdb-log.at:154): ok     (0m0.000s 0m0.000s)
682. write, corrupt some data, read, overwrite (ovsdb-log.at:186): ok     (0m0.000s 0m0.000s)
683. write, truncate file, read, overwrite (ovsdb-log.at:219): ok     (0m0.000s 0m0.000s)
684. write bad JSON, read, overwrite (ovsdb-log.at:252): ok     (0m0.000s 0m0.000s)
685. integer - C (ovsdb-types.at:3): ok     (0m0.000s 0m0.000s)
686. integer - Python (ovsdb-types.at:3): ok     (0m0.072s 0m0.032s)
687. real - C (ovsdb-types.at:5): ok     (0m0.000s 0m0.000s)
688. real - Python (ovsdb-types.at:5): ok     (0m0.084s 0m0.012s)
689. boolean - C (ovsdb-types.at:7): ok     (0m0.000s 0m0.000s)
690. boolean - Python (ovsdb-types.at:7): ok     (0m0.084s 0m0.012s)
691. string - C (ovsdb-types.at:9): ok     (0m0.000s 0m0.000s)
692. string - Python (ovsdb-types.at:9): ok     (0m0.084s 0m0.012s)
693. uuid - C (ovsdb-types.at:11): ok     (0m0.000s 0m0.000s)
694. uuid - Python (ovsdb-types.at:11): ok     (0m0.084s 0m0.012s)
695. void is not a valid atomic-type - C (ovsdb-types.at:13): ok     (0m0.000s 0m0.000s)
696. void is not a valid atomic-type - Python (ovsdb-types.at:13): ok     (0m0.084s 0m0.012s)
697. integer enum - C (ovsdb-types.at:18): ok     (0m0.000s 0m0.000s)
698. integer enum - Python (ovsdb-types.at:18): ok     (0m0.080s 0m0.016s)
699. integer >= 5 - C (ovsdb-types.at:21): ok     (0m0.000s 0m0.000s)
700. integer >= 5 - Python (ovsdb-types.at:21): ok     (0m0.076s 0m0.020s)
701. integer <= 7 - C (ovsdb-types.at:24): ok     (0m0.000s 0m0.000s)
702. integer <= 7 - Python (ovsdb-types.at:24): ok     (0m0.076s 0m0.020s)
703. integer between -5 and 10 - C (ovsdb-types.at:27): ok     (0m0.000s 0m0.000s)
704. integer between -5 and 10 - Python (ovsdb-types.at:27): ok     (0m0.088s 0m0.008s)
705. integer max may not be less than min - C (ovsdb-types.at:30): ok     (0m0.000s 0m0.000s)
706. integer max may not be less than min - Python (ovsdb-types.at:30): ok     (0m0.076s 0m0.020s)
707. real enum - C (ovsdb-types.at:34): ok     (0m0.000s 0m0.000s)
708. real enum - Python (ovsdb-types.at:34): ok     (0m0.084s 0m0.012s)
709. real >= -1.5 - C (ovsdb-types.at:37): ok     (0m0.000s 0m0.000s)
710. real >= -1.5 - Python (ovsdb-types.at:37): ok     (0m0.080s 0m0.016s)
711. real <= 1e5 - C (ovsdb-types.at:40): ok     (0m0.000s 0m0.000s)
712. real <= 1e5 - Python (ovsdb-types.at:40): ok     (0m0.080s 0m0.016s)
713. real between -2.5 and 3.75 - C (ovsdb-types.at:43): ok     (0m0.000s 0m0.000s)
714. real between -2.5 and 3.75 - Python (ovsdb-types.at:43): ok     (0m0.072s 0m0.024s)
715. real max may not be less than min - C (ovsdb-types.at:46): ok     (0m0.000s 0m0.000s)
716. real max may not be less than min - Python (ovsdb-types.at:46): ok     (0m0.076s 0m0.020s)
717. boolean - C (ovsdb-types.at:50): ok     (0m0.000s 0m0.000s)
718. boolean - Python (ovsdb-types.at:50): ok     (0m0.096s 0m0.000s)
719. boolean enum - C (ovsdb-types.at:52): ok     (0m0.000s 0m0.000s)
720. boolean enum - Python (ovsdb-types.at:52): ok     (0m0.088s 0m0.008s)
721. string enum - C (ovsdb-types.at:56): ok     (0m0.000s 0m0.000s)
722. string enum - Python (ovsdb-types.at:56): ok     (0m0.084s 0m0.012s)
723. string minLength - C (ovsdb-types.at:59): ok     (0m0.000s 0m0.000s)
724. string minLength - Python (ovsdb-types.at:59): ok     (0m0.080s 0m0.016s)
725. string maxLength - C (ovsdb-types.at:62): ok     (0m0.000s 0m0.000s)
726. string maxLength - Python (ovsdb-types.at:62): ok     (0m0.080s 0m0.016s)
727. string minLength and maxLength - C (ovsdb-types.at:65): ok     (0m0.000s 0m0.000s)
728. string minLength and maxLength - Python (ovsdb-types.at:65): ok     (0m0.076s 0m0.020s)
729. maxLength must not be less than minLength - C (ovsdb-types.at:68): ok     (0m0.000s 0m0.000s)
730. maxLength must not be less than minLength - Python (ovsdb-types.at:68): ok     (0m0.084s 0m0.012s)
731. maxLength must not be negative - C (ovsdb-types.at:71): ok     (0m0.000s 0m0.000s)
732. maxLength must not be negative - Python (ovsdb-types.at:71): ok     (0m0.084s 0m0.012s)
733. uuid enum - C (ovsdb-types.at:75): ok     (0m0.000s 0m0.000s)
734. uuid enum - Python (ovsdb-types.at:75): ok     (0m0.076s 0m0.020s)
735. uuid refTable - C (ovsdb-types.at:78): ok     (0m0.000s 0m0.000s)
736. uuid refTable - Python (ovsdb-types.at:78): ok     (0m0.084s 0m0.012s)
737. uuid refTable must be valid id - C (ovsdb-types.at:81): ok     (0m0.000s 0m0.000s)
738. uuid refTable must be valid id - Python (ovsdb-types.at:81): ok     (0m0.076s 0m0.020s)
739. void is not a valid base-type - C (ovsdb-types.at:85): ok     (0m0.000s 0m0.000s)
740. void is not a valid base-type - Python (ovsdb-types.at:85): ok     (0m0.084s 0m0.012s)
741. "type" member must be present - C (ovsdb-types.at:87): ok     (0m0.000s 0m0.000s)
742. "type" member must be present - Python (ovsdb-types.at:87): ok     (0m0.068s 0m0.028s)
743. simple integer - C (ovsdb-types.at:92): ok     (0m0.000s 0m0.000s)
744. simple integer - Python (ovsdb-types.at:92): ok     (0m0.088s 0m0.008s)
745. simple real - C (ovsdb-types.at:94): ok     (0m0.000s 0m0.000s)
746. simple real - Python (ovsdb-types.at:94): ok     (0m0.072s 0m0.024s)
747. simple boolean - C (ovsdb-types.at:96): ok     (0m0.000s 0m0.000s)
748. simple boolean - Python (ovsdb-types.at:96): ok     (0m0.084s 0m0.012s)
749. simple string - C (ovsdb-types.at:98): ok     (0m0.000s 0m0.000s)
750. simple string - Python (ovsdb-types.at:98): ok     (0m0.088s 0m0.008s)
751. simple uuid - C (ovsdb-types.at:100): ok     (0m0.000s 0m0.000s)
752. simple uuid - Python (ovsdb-types.at:100): ok     (0m0.088s 0m0.008s)
753. integer in object - C (ovsdb-types.at:102): ok     (0m0.000s 0m0.000s)
754. integer in object - Python (ovsdb-types.at:102): ok     (0m0.080s 0m0.016s)
755. real in object with explicit min and max - C (ovsdb-types.at:104): ok     (0m0.000s 0m0.000s)
756. real in object with explicit min and max - Python (ovsdb-types.at:104): ok     (0m0.084s 0m0.012s)
757. key type is required - C (ovsdb-types.at:107): ok     (0m0.000s 0m0.000s)
758. key type is required - Python (ovsdb-types.at:107): ok     (0m0.088s 0m0.008s)
759. void is not a valid type - C (ovsdb-types.at:109): ok     (0m0.000s 0m0.000s)
760. void is not a valid type - Python (ovsdb-types.at:109): ok     (0m0.084s 0m0.012s)
761. optional boolean - C (ovsdb-types.at:114): ok     (0m0.000s 0m0.000s)
762. optional boolean - Python (ovsdb-types.at:114): ok     (0m0.084s 0m0.012s)
763. set of 1 to 3 uuids - C (ovsdb-types.at:118): ok     (0m0.000s 0m0.000s)
764. set of 1 to 3 uuids - Python (ovsdb-types.at:118): ok     (0m0.084s 0m0.012s)
765. set of 0 to 3 strings - C (ovsdb-types.at:121): ok     (0m0.000s 0m0.000s)
766. set of 0 to 3 strings - Python (ovsdb-types.at:121): ok     (0m0.084s 0m0.012s)
767. set of 0 or more integers - C (ovsdb-types.at:124): ok     (0m0.000s 0m0.000s)
768. set of 0 or more integers - Python (ovsdb-types.at:124): ok     (0m0.092s 0m0.004s)
769. set of 1 or more reals - C (ovsdb-types.at:127): ok     (0m0.000s 0m0.000s)
770. set of 1 or more reals - Python (ovsdb-types.at:127): ok     (0m0.088s 0m0.008s)
771. set max cannot be less than min - C (ovsdb-types.at:131): ok     (0m0.000s 0m0.000s)
772. set max cannot be less than min - Python (ovsdb-types.at:131): ok     (0m0.064s 0m0.032s)
773. set max cannot be negative - C (ovsdb-types.at:134): ok     (0m0.000s 0m0.000s)
774. set max cannot be negative - Python (ovsdb-types.at:134): ok     (0m0.072s 0m0.024s)
775. set min cannot be negative - C (ovsdb-types.at:137): ok     (0m0.000s 0m0.000s)
776. set min cannot be negative - Python (ovsdb-types.at:137): ok     (0m0.084s 0m0.012s)
777. set min cannot be greater than one - C (ovsdb-types.at:140): ok     (0m0.000s 0m0.000s)
778. set min cannot be greater than one - Python (ovsdb-types.at:140): ok     (0m0.068s 0m0.028s)
779. map of 1 integer to boolean - C (ovsdb-types.at:146): ok     (0m0.000s 0m0.000s)
780. map of 1 integer to boolean - Python (ovsdb-types.at:146): ok     (0m0.072s 0m0.024s)
781. map of 1 boolean to integer, explicit min and max - C (ovsdb-types.at:149): ok     (0m0.000s 0m0.000s)
782. map of 1 boolean to integer, explicit min and max - Python (ovsdb-types.at:149): ok     (0m0.064s 0m0.032s)
783. map of 1 to 5 uuid to real - C (ovsdb-types.at:152): ok     (0m0.000s 0m0.000s)
784. map of 1 to 5 uuid to real - Python (ovsdb-types.at:152): ok     (0m0.084s 0m0.012s)
785. map of 0 to 10 string to uuid - C (ovsdb-types.at:155): ok     (0m0.000s 0m0.000s)
786. map of 0 to 10 string to uuid - Python (ovsdb-types.at:155): ok     (0m0.088s 0m0.008s)
787. map of 1 to 20 real to string - C (ovsdb-types.at:158): ok     (0m0.000s 0m0.000s)
788. map of 1 to 20 real to string - Python (ovsdb-types.at:158): ok     (0m0.080s 0m0.016s)
789. map of 0 or more string to real - C (ovsdb-types.at:161): ok     (0m0.000s 0m0.000s)
790. map of 0 or more string to real - Python (ovsdb-types.at:161): ok     (0m0.092s 0m0.004s)
791. map key type is required - C (ovsdb-types.at:165): ok     (0m0.000s 0m0.000s)
792. map key type is required - Python (ovsdb-types.at:165): ok     (0m0.080s 0m0.012s)
793. default atoms - C (ovsdb-data.at:3): ok     (0m0.000s 0m0.000s)
794. default atoms - Python (ovsdb-data.at:3): ok     (0m0.084s 0m0.008s)
795. default data - C (ovsdb-data.at:11): ok     (0m0.000s 0m0.000s)
796. default data - Python (ovsdb-data.at:11): ok     (0m0.076s 0m0.020s)
797. integer atom from JSON - C (ovsdb-data.at:76): ok     (0m0.000s 0m0.000s)
798. integer atom from JSON - Python (ovsdb-data.at:76): ok     (0m0.068s 0m0.028s)
799. integer atom from string (ovsdb-data.at:89): ok     (0m0.000s 0m0.000s)
800. real atom from JSON - C (ovsdb-data.at:102): ok     (0m0.000s 0m0.000s)
801. real atom from JSON - Python (ovsdb-data.at:102): ok     (0m0.080s 0m0.016s)
802. real atom from string (ovsdb-data.at:119): ok     (0m0.000s 0m0.000s)
803. boolean atom from JSON - C (ovsdb-data.at:136): ok     (0m0.000s 0m0.000s)
804. boolean atom from JSON - Python (ovsdb-data.at:136): ok     (0m0.076s 0m0.016s)
805. boolean atom from string (ovsdb-data.at:141): ok     (0m0.000s 0m0.000s)
806. string atom from JSON - C (ovsdb-data.at:146): ok     (0m0.000s 0m0.000s)
807. string atom from JSON - Python (ovsdb-data.at:146): ok     (0m0.076s 0m0.016s)
808. string atom from string (ovsdb-data.at:152): ok     (0m0.000s 0m0.000s)
809. uuid atom from JSON - C (ovsdb-data.at:167): ok     (0m0.000s 0m0.000s)
810. uuid atom from JSON - Python (ovsdb-data.at:167): ok     (0m0.080s 0m0.012s)
811. uuid atom from string (ovsdb-data.at:171): ok     (0m0.000s 0m0.000s)
812. integer atom sorting - C (ovsdb-data.at:175): ok     (0m0.000s 0m0.000s)
813. integer atom sorting - Python (ovsdb-data.at:175): ok     (0m0.076s 0m0.016s)
814. real atom sorting - C (ovsdb-data.at:179): ok     (0m0.000s 0m0.000s)
815. real atom sorting - Python (ovsdb-data.at:179): ok     (0m0.088s 0m0.008s)
816. boolean atom sorting - C (ovsdb-data.at:183): ok     (0m0.000s 0m0.000s)
817. boolean atom sorting - Python (ovsdb-data.at:183): ok     (0m0.072s 0m0.020s)
818. string atom sorting - C (ovsdb-data.at:187): ok     (0m0.000s 0m0.000s)
819. string atom sorting - Python (ovsdb-data.at:187): ok     (0m0.084s 0m0.008s)
820. uuid atom sorting - C (ovsdb-data.at:191): ok     (0m0.000s 0m0.000s)
821. uuid atom sorting - Python (ovsdb-data.at:191): ok     (0m0.080s 0m0.020s)
822. real not acceptable integer JSON atom - C (ovsdb-data.at:228): ok     (0m0.000s 0m0.000s)
823. real not acceptable integer JSON atom - Python (ovsdb-data.at:228): ok     (0m0.076s 0m0.020s)
824. no invalid UTF-8 sequences in strings (ovsdb-data.at:234): ok     (0m0.000s 0m0.000s)
825. no invalid UTF-8 sequences in strings - Python (ovsdb-data.at:249): ok     (0m0.088s 0m0.008s)
826. real not acceptable integer string atom (ovsdb-data.at:257): ok     (0m0.000s 0m0.000s)
827. string "true" not acceptable boolean JSON atom - C (ovsdb-data.at:261): ok     (0m0.000s 0m0.000s)
828. string "true" not acceptable boolean JSON atom - Python (ovsdb-data.at:261): ok     (0m0.076s 0m0.016s)
829. string "true" not acceptable boolean string atom (ovsdb-data.at:265): ok     (0m0.000s 0m0.000s)
830. integer not acceptable string JSON atom - C (ovsdb-data.at:269): ok     (0m0.000s 0m0.000s)
831. integer not acceptable string JSON atom - Python (ovsdb-data.at:269): ok     (0m0.076s 0m0.016s)
832. uuid atom must be expressed as JSON array - C (ovsdb-data.at:273): ok     (0m0.000s 0m0.000s)
833. uuid atom must be expressed as JSON array - Python (ovsdb-data.at:273): ok     (0m0.068s 0m0.024s)
834. named-uuid requires symbol table - C (ovsdb-data.at:277): ok     (0m0.000s 0m0.000s)
835. named-uuid requires symbol table - Python (ovsdb-data.at:277): ok     (0m0.080s 0m0.012s)
836. empty string atom must be quoted (ovsdb-data.at:281): ok     (0m0.000s 0m0.000s)
837. quotes must be balanced (ovsdb-data.at:285): ok     (0m0.000s 0m0.000s)
838. uuids must be valid (ovsdb-data.at:289): ok     (0m0.000s 0m0.000s)
839. integer atom enum - C (ovsdb-data.at:295): ok     (0m0.000s 0m0.000s)
840. integer atom enum - Python (ovsdb-data.at:295): ok     (0m0.064s 0m0.028s)
841. real atom enum - C (ovsdb-data.at:318): ok     (0m0.000s 0m0.000s)
842. real atom enum - Python (ovsdb-data.at:318): ok     (0m0.072s 0m0.020s)
843. boolean atom enum - C (ovsdb-data.at:335): ok     (0m0.000s 0m0.000s)
844. boolean atom enum - Python (ovsdb-data.at:335): ok     (0m0.072s 0m0.020s)
845. string atom enum - C (ovsdb-data.at:342): ok     (0m0.000s 0m0.000s)
846. string atom enum - Python (ovsdb-data.at:342): ok     (0m0.076s 0m0.016s)
847. uuid atom enum - C (ovsdb-data.at:357): ok     (0m0.000s 0m0.000s)
848. uuid atom enum - Python (ovsdb-data.at:357): ok     (0m0.084s 0m0.012s)
849. integers >= 5 - C (ovsdb-data.at:368): ok     (0m0.000s 0m0.000s)
850. integers >= 5 - Python (ovsdb-data.at:368): ok     (0m0.072s 0m0.024s)
851. integers <= -1 - C (ovsdb-data.at:381): ok     (0m0.000s 0m0.000s)
852. integers <= -1 - Python (ovsdb-data.at:381): ok     (0m0.076s 0m0.016s)
853. integers in range -10 to 10 - C (ovsdb-data.at:392): ok     (0m0.000s 0m0.000s)
854. integers in range -10 to 10 - Python (ovsdb-data.at:392): ok     (0m0.084s 0m0.008s)
855. reals >= 5 - C (ovsdb-data.at:413): ok     (0m0.000s 0m0.000s)
856. reals >= 5 - Python (ovsdb-data.at:413): ok     (0m0.080s 0m0.012s)
857. reals <= -1 - C (ovsdb-data.at:426): ok     (0m0.000s 0m0.000s)
858. reals <= -1 - Python (ovsdb-data.at:426): ok     (0m0.088s 0m0.004s)
859. reals in range -10 to 10 - C (ovsdb-data.at:437): ok     (0m0.000s 0m0.000s)
860. reals in range -10 to 10 - Python (ovsdb-data.at:437): ok     (0m0.088s 0m0.004s)
861. strings at least 2 characters long - C (ovsdb-data.at:458): ok     (0m0.000s 0m0.000s)
862. strings at least 2 characters long - Python (ovsdb-data.at:458): ok     (0m0.080s 0m0.024s)
863. strings no more than 2 characters long - C (ovsdb-data.at:476): ok     (0m0.000s 0m0.000s)
864. strings no more than 2 characters long - Python (ovsdb-data.at:476): ok     (0m0.080s 0m0.012s)
865. integer JSON datum - C (ovsdb-data.at:491): ok     (0m0.000s 0m0.000s)
866. integer JSON datum - Python (ovsdb-data.at:491): ok     (0m0.080s 0m0.012s)
867. integer string datum (ovsdb-data.at:497): ok     (0m0.000s 0m0.000s)
868. real JSON datum - C (ovsdb-data.at:504): ok     (0m0.000s 0m0.000s)
869. real JSON datum - Python (ovsdb-data.at:504): ok     (0m0.092s 0m0.000s)
870. real string datum (ovsdb-data.at:510): ok     (0m0.000s 0m0.000s)
871. boolean JSON datum - C (ovsdb-data.at:516): ok     (0m0.000s 0m0.000s)
872. boolean JSON datum - Python (ovsdb-data.at:516): ok     (0m0.088s 0m0.004s)
873. boolean string datum (ovsdb-data.at:521): ok     (0m0.000s 0m0.000s)
874. string JSON datum - C (ovsdb-data.at:526): ok     (0m0.000s 0m0.000s)
875. string JSON datum - Python (ovsdb-data.at:526): ok     (0m0.072s 0m0.020s)
876. string string datum (ovsdb-data.at:532): ok     (0m0.000s 0m0.000s)
877. JSON optional boolean - C (ovsdb-data.at:541): ok     (0m0.000s 0m0.000s)
878. JSON optional boolean - Python (ovsdb-data.at:541): ok     (0m0.076s 0m0.020s)
879. string optional boolean (ovsdb-data.at:551): ok     (0m0.000s 0m0.000s)
880. JSON set of 0 or more integers - C (ovsdb-data.at:561): ok     (0m0.000s 0m0.000s)
881. JSON set of 0 or more integers - Python (ovsdb-data.at:561): ok     (0m0.072s 0m0.024s)
882. string set of 0 or more integers (ovsdb-data.at:578): ok     (0m0.000s 0m0.000s)
883. JSON set of 1 to 3 uuids - C (ovsdb-data.at:593): ok     (0m0.000s 0m0.000s)
884. JSON set of 1 to 3 uuids - Python (ovsdb-data.at:593): ok     (0m0.076s 0m0.020s)
885. string set of 1 to 3 uuids (ovsdb-data.at:604): ok     (0m0.000s 0m0.000s)
886. JSON set of 0 to 3 strings - C (ovsdb-data.at:613): ok     (0m0.000s 0m0.000s)
887. JSON set of 0 to 3 strings - Python (ovsdb-data.at:613): ok     (0m0.080s 0m0.016s)
888. string set of 0 to 3 strings (ovsdb-data.at:626): ok     (0m0.000s 0m0.000s)
889. duplicate boolean not allowed in JSON set - C (ovsdb-data.at:637): ok     (0m0.000s 0m0.000s)
890. duplicate boolean not allowed in JSON set - Python (ovsdb-data.at:637): ok     (0m0.076s 0m0.016s)
891. duplicate boolean not allowed in string set (ovsdb-data.at:641): ok     (0m0.000s 0m0.000s)
892. duplicate integer not allowed in JSON set - C (ovsdb-data.at:645): ok     (0m0.000s 0m0.000s)
893. duplicate integer not allowed in JSON set - Python (ovsdb-data.at:645): ok     (0m0.092s 0m0.000s)
894. duplicate integer not allowed in string set (ovsdb-data.at:649): ok     (0m0.000s 0m0.000s)
895. duplicate real not allowed in JSON set - C (ovsdb-data.at:653): ok     (0m0.000s 0m0.000s)
896. duplicate real not allowed in JSON set - Python (ovsdb-data.at:653): ok     (0m0.076s 0m0.016s)
897. duplicate real not allowed in string set (ovsdb-data.at:657): ok     (0m0.000s 0m0.000s)
898. duplicate string not allowed in JSON set - C (ovsdb-data.at:661): ok     (0m0.000s 0m0.000s)
899. duplicate string not allowed in JSON set - Python (ovsdb-data.at:661): ok     (0m0.056s 0m0.036s)
900. duplicate string not allowed in string set (ovsdb-data.at:665): ok     (0m0.000s 0m0.000s)
901. duplicate uuid not allowed in JSON set - C (ovsdb-data.at:669): ok     (0m0.000s 0m0.000s)
902. duplicate uuid not allowed in JSON set - Python (ovsdb-data.at:669): ok     (0m0.072s 0m0.020s)
903. duplicate uuid not allowed in string set (ovsdb-data.at:676): ok     (0m0.000s 0m0.000s)
904. JSON map of 1 integer to boolean - C (ovsdb-data.at:685): ok     (0m0.000s 0m0.000s)
905. JSON map of 1 integer to boolean - Python (ovsdb-data.at:685): ok     (0m0.080s 0m0.012s)
906. string map of 1 integer to boolean (ovsdb-data.at:690): ok     (0m0.000s 0m0.000s)
907. JSON map of at least 1 integer to boolean - C (ovsdb-data.at:695): ok     (0m0.000s 0m0.000s)
908. JSON map of at least 1 integer to boolean - Python (ovsdb-data.at:695): ok     (0m0.076s 0m0.020s)
909. string map of at least 1 integer to boolean (ovsdb-data.at:704): ok     (0m0.000s 0m0.000s)
910. JSON map of 1 boolean to integer - C (ovsdb-data.at:713): ok     (0m0.000s 0m0.000s)
911. JSON map of 1 boolean to integer - Python (ovsdb-data.at:713): ok     (0m0.080s 0m0.012s)
912. string map of 1 boolean to integer (ovsdb-data.at:718): ok     (0m0.000s 0m0.000s)
913. JSON map of 1 uuid to real - C (ovsdb-data.at:723): ok     (0m0.000s 0m0.000s)
914. JSON map of 1 uuid to real - Python (ovsdb-data.at:723): ok     (0m0.080s 0m0.016s)
915. string map of 1 uuid to real (ovsdb-data.at:732): ok     (0m0.000s 0m0.000s)
916. JSON map of 10 string to string - C (ovsdb-data.at:741): ok     (0m0.000s 0m0.000s)
917. JSON map of 10 string to string - Python (ovsdb-data.at:741): ok     (0m0.076s 0m0.020s)
918. string map of 10 string to string (ovsdb-data.at:755): ok     (0m0.000s 0m0.000s)
919. duplicate integer key not allowed in JSON map - C (ovsdb-data.at:769): ok     (0m0.000s 0m0.000s)
920. duplicate integer key not allowed in JSON map - Python (ovsdb-data.at:769): ok     (0m0.080s 0m0.012s)
921. duplicate integer key not allowed in string map (ovsdb-data.at:774): ok     (0m0.000s 0m0.000s)
922. ordinary column - C (ovsdb-column.at:3): ok     (0m0.000s 0m0.000s)
923. ordinary column - Python (ovsdb-column.at:3): ok     (0m0.084s 0m0.008s)
924. immutable column - C (ovsdb-column.at:7): ok     (0m0.000s 0m0.000s)
925. immutable column - Python (ovsdb-column.at:7): ok     (0m0.076s 0m0.016s)
926. ephemeral column - C (ovsdb-column.at:11): ok     (0m0.000s 0m0.000s)
927. ephemeral column - Python (ovsdb-column.at:11): ok     (0m0.080s 0m0.012s)
928. non-root table with one column - C (ovsdb-table.at:3): ok     (0m0.000s 0m0.000s)
929. non-root table with one column - Python (ovsdb-table.at:3): ok     (0m0.072s 0m0.020s)
930. immutable table with one column - C (ovsdb-table.at:7): ok     (0m0.000s 0m0.000s)
931. immutable table with one column - Python (ovsdb-table.at:7): ok     (0m0.072s 0m0.020s)
932. root table with one column - C (ovsdb-table.at:13): ok     (0m0.000s 0m0.000s)
933. root table with one column - Python (ovsdb-table.at:13): ok     (0m0.084s 0m0.008s)
934. non-root table with default_is_root=true - C (ovsdb-table.at:19): ok     (0m0.000s 0m0.000s)
935. non-root table with default_is_root=true - Python (ovsdb-table.at:19): ok     (0m0.076s 0m0.016s)
936. root table with default_is_root=true - C (ovsdb-table.at:23): ok     (0m0.000s 0m0.000s)
937. root table with default_is_root=true - Python (ovsdb-table.at:23): ok     (0m0.076s 0m0.016s)
938. table with maxRows of 2 - C (ovsdb-table.at:29): ok     (0m0.000s 0m0.000s)
939. table with maxRows of 2 - Python (ovsdb-table.at:29): ok     (0m0.084s 0m0.012s)
940. table with index - C (ovsdb-table.at:34): ok     (0m0.000s 0m0.000s)
941. table with index - Python (ovsdb-table.at:34): ok     (0m0.084s 0m0.008s)
942. table with syntax error in index - C (ovsdb-table.at:40): ok     (0m0.000s 0m0.000s)
943. table with syntax error in index - Python (ovsdb-table.at:40): ok     (0m0.072s 0m0.020s)
944. table with empty index - C (ovsdb-table.at:46): ok     (0m0.000s 0m0.000s)
945. table with empty index - Python (ovsdb-table.at:46): ok     (0m0.080s 0m0.012s)
946. table with index of ephemeral column - C (ovsdb-table.at:52): ok     (0m0.000s 0m0.000s)
947. table with index of ephemeral column - Python (ovsdb-table.at:52): ok     (0m0.056s 0m0.036s)
948. column names may not begin with _ - C (ovsdb-table.at:59): ok     (0m0.000s 0m0.000s)
949. column names may not begin with _ - Python (ovsdb-table.at:59): ok     (0m0.080s 0m0.012s)
950. table must have at least one column (1) - C (ovsdb-table.at:65): ok     (0m0.000s 0m0.000s)
951. table must have at least one column (1) - Python (ovsdb-table.at:65): ok     (0m0.068s 0m0.024s)
952. table must have at least one column (2) - C (ovsdb-table.at:69): ok     (0m0.000s 0m0.000s)
953. table must have at least one column (2) - Python (ovsdb-table.at:69): ok     (0m0.084s 0m0.008s)
954. table maxRows must be positive - C (ovsdb-table.at:73): ok     (0m0.000s 0m0.000s)
955. table maxRows must be positive - Python (ovsdb-table.at:73): ok     (0m0.080s 0m0.012s)
956. row with one string column (ovsdb-row.at:5): ok     (0m0.000s 0m0.000s)
957. row with one integer column (ovsdb-row.at:21): ok     (0m0.000s 0m0.000s)
958. row with one real column (ovsdb-row.at:37): ok     (0m0.000s 0m0.000s)
959. row with one boolean column (ovsdb-row.at:53): ok     (0m0.000s 0m0.000s)
960. row with one uuid column (ovsdb-row.at:66): ok     (0m0.000s 0m0.000s)
961. row with set of 1 to 2 elements (ovsdb-row.at:79): ok     (0m0.000s 0m0.000s)
962. row with map of 1 to 2 elements (ovsdb-row.at:86): ok     (0m0.000s 0m0.000s)
963. row with several columns (ovsdb-row.at:93): ok     (0m0.000s 0m0.000s)
964. row hashing (scalars) (ovsdb-row.at:115): ok     (0m0.000s 0m0.000s)
965. row hashing (sets) (ovsdb-row.at:184): ok     (0m0.000s 0m0.000s)
966. row hashing (maps) (ovsdb-row.at:237): ok     (0m0.000s 0m0.000s)
967. schema with valid refTables - C (ovsdb-schema.at:3): ok     (0m0.000s 0m0.000s)
968. schema with valid refTables - Python (ovsdb-schema.at:3): ok     (0m0.092s 0m0.004s)
969. schema with ephemeral strong references - C (ovsdb-schema.at:30): ok     (0m0.000s 0m0.000s)
970. schema with ephemeral strong references - Python (ovsdb-schema.at:30): ok     (0m0.072s 0m0.024s)
971. schema without version number - C (ovsdb-schema.at:61): ok     (0m0.000s 0m0.000s)
972. schema without version number - Python (ovsdb-schema.at:61): ok     (0m0.080s 0m0.012s)
973. schema with invalid refTables - C (ovsdb-schema.at:71): ok     (0m0.000s 0m0.000s)
974. schema with invalid refTables - Python (ovsdb-schema.at:71): ok     (0m0.072s 0m0.024s)
975. schema with invalid version number - C (ovsdb-schema.at:94): ok     (0m0.000s 0m0.000s)
976. schema with invalid version number - Python (ovsdb-schema.at:94): ok     (0m0.080s 0m0.012s)
977. null condition (ovsdb-condition.at:3): ok     (0m0.000s 0m0.000s)
978. conditions on scalars (ovsdb-condition.at:9): ok     (0m0.000s 0m0.000s)
979. disallowed conditions on scalars (ovsdb-condition.at:75): ok     (0m0.000s 0m0.000s)
980. conditions on sets (ovsdb-condition.at:112): ok     (0m0.000s 0m0.000s)
981. condition sorting (ovsdb-condition.at:173): ok     (0m0.000s 0m0.000s)
982. evaluating null condition (ovsdb-condition.at:187): ok     (0m0.000s 0m0.000s)
983. evaluating conditions on integers (ovsdb-condition.at:196): ok     (0m0.000s 0m0.000s)
984. evaluating conditions on reals (ovsdb-condition.at:221): ok     (0m0.000s 0m0.000s)
985. evaluating conditions on booleans (ovsdb-condition.at:246): ok     (0m0.000s 0m0.000s)
986. evaluating conditions on strings (ovsdb-condition.at:270): ok     (0m0.000s 0m0.000s)
987. evaluating conditions on UUIDs (ovsdb-condition.at:295): ok     (0m0.000s 0m0.000s)
988. evaluating conditions on sets (ovsdb-condition.at:321): ok     (0m0.000s 0m0.000s)
989. evaluating conditions on maps (1) (ovsdb-condition.at:403): ok     (0m0.000s 0m0.000s)
990. evaluating conditions on maps (2) (ovsdb-condition.at:488): ok     (0m0.000s 0m0.000s)
991. null mutation (ovsdb-mutation.at:3): ok     (0m0.000s 0m0.000s)
992. mutations on scalars (ovsdb-mutation.at:9): ok     (0m0.000s 0m0.000s)
993. disallowed mutations on scalars (ovsdb-mutation.at:37): ok     (0m0.000s 0m0.000s)
994. disallowed mutations on immutable columns (ovsdb-mutation.at:102): ok     (0m0.000s 0m0.000s)
995. mutations on sets (ovsdb-mutation.at:114): ok     (0m0.000s 0m0.000s)
996. executing null mutation (ovsdb-mutation.at:166): ok     (0m0.000s 0m0.000s)
997. executing mutations on integers (ovsdb-mutation.at:179): ok     (0m0.000s 0m0.000s)
998. integer overflow detection (ovsdb-mutation.at:216): ok     (0m0.000s 0m0.000s)
999. executing mutations on integers with constraints (ovsdb-mutation.at:297): ok     (0m0.000s 0m0.000s)
1000. executing mutations on reals (ovsdb-mutation.at:336): ok     (0m0.000s 0m0.000s)
1001. real overflow detection (ovsdb-mutation.at:367): ok     (0m0.000s 0m0.000s)
1002. executing mutations on reals with constraints (ovsdb-mutation.at:410): ok     (0m0.000s 0m0.000s)
1003. executing mutations on integer sets (ovsdb-mutation.at:443): ok     (0m0.000s 0m0.000s)
1004. executing mutations on integer sets with constraints (ovsdb-mutation.at:517): ok     (0m0.000s 0m0.000s)
1005. executing mutations on real sets (ovsdb-mutation.at:556): ok     (0m0.000s 0m0.000s)
1006. executing mutations on boolean sets (ovsdb-mutation.at:629): ok     (0m0.000s 0m0.000s)
1007. executing mutations on string sets (ovsdb-mutation.at:679): ok     (0m0.000s 0m0.000s)
1008. executing mutations on uuid sets (ovsdb-mutation.at:729): ok     (0m0.000s 0m0.000s)
1009. executing mutations on integer maps (ovsdb-mutation.at:779): ok     (0m0.000s 0m0.000s)
1010. queries on scalars (ovsdb-query.at:3): ok     (0m0.000s 0m0.000s)
1011. queries on sets (ovsdb-query.at:95): ok     (0m0.000s 0m0.000s)
1012. queries on maps (1) (ovsdb-query.at:176): ok     (0m0.000s 0m0.000s)
1013. queries on maps (2) (ovsdb-query.at:260): ok     (0m0.000s 0m0.000s)
1014. UUID-distinct queries on scalars (ovsdb-query.at:351): ok     (0m0.000s 0m0.000s)
1015. Boolean-distinct queries on scalars (ovsdb-query.at:444): ok     (0m0.000s 0m0.000s)
1016. parse colunn set containing bad name (ovsdb-query.at:537): ok     (0m0.000s 0m0.000s)
1017. empty table, empty transaction (ovsdb-transaction.at:3): ok     (0m0.000s 0m0.000s)
1018. nonempty table, empty transaction (ovsdb-transaction.at:17): ok     (0m0.000s 0m0.000s)
1019. insert, commit (ovsdb-transaction.at:41): ok     (0m0.000s 0m0.000s)
1020. insert, abort (ovsdb-transaction.at:70): ok     (0m0.000s 0m0.000s)
1021. modify, commit (ovsdb-transaction.at:98): ok     (0m0.000s 0m0.000s)
1022. modify, abort (ovsdb-transaction.at:127): ok     (0m0.000s 0m0.000s)
1023. delete, commit (ovsdb-transaction.at:156): ok     (0m0.000s 0m0.000s)
1024. delete, abort (ovsdb-transaction.at:181): ok     (0m0.000s 0m0.000s)
1025. modify, delete, commit (ovsdb-transaction.at:207): ok     (0m0.000s 0m0.000s)
1026. modify, delete, abort (ovsdb-transaction.at:234): ok     (0m0.000s 0m0.000s)
1027. insert, delete, commit (ovsdb-transaction.at:262): ok     (0m0.000s 0m0.000s)
1028. insert, delete, abort (ovsdb-transaction.at:291): ok     (0m0.000s 0m0.000s)
1029. insert, modify, delete, commit (ovsdb-transaction.at:322): ok     (0m0.000s 0m0.000s)
1030. insert, modify, delete, abort (ovsdb-transaction.at:353): ok     (0m0.000s 0m0.000s)
1031. deletes are aborted cleanly (ovsdb-transaction.at:385): ok     (0m0.000s 0m0.000s)
1032. uuid-name must be <id> (ovsdb-execution.at:147): ok     (0m0.004s 0m0.000s)
1033. named-uuid must be <id> (ovsdb-execution.at:157): ok     (0m0.004s 0m0.000s)
1034. duplicate uuid-name not allowed (ovsdb-execution.at:166): ok     (0m0.004s 0m0.000s)
1035. insert default row, query table (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1036. insert row, query table (ovsdb-execution.at:1099): ok     (0m0.000s 0m0.004s)
1037. insert rows, query by value (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1038. insert rows, query by named-uuid (ovsdb-execution.at:1099): ok     (0m0.000s 0m0.004s)
1039. insert rows, update rows by value (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1040. insert rows, mutate rows (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1041. insert rows, delete by named-uuid (ovsdb-execution.at:1099): ok     (0m0.000s 0m0.004s)
1042. insert rows, delete rows by value (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1043. insert rows, delete by (non-matching) value (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1044. insert rows, delete all (ovsdb-execution.at:1099): ok     (0m0.000s 0m0.004s)
1045. insert row, query table, commit (ovsdb-execution.at:1099): ok     (0m0.000s 0m0.004s)
1046. insert row, query table, commit durably (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1047. equality wait with correct rows (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1048. equality wait with extra row (ovsdb-execution.at:1099): ok     (0m0.000s 0m0.004s)
1049. equality wait with missing row (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1050. inequality wait with correct rows (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1051. inequality wait with extra row (ovsdb-execution.at:1099): ok     (0m0.000s 0m0.004s)
1052. inequality wait with missing row (ovsdb-execution.at:1099): ok     (0m0.000s 0m0.004s)
1053. insert and update constraints (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1054. index uniqueness checking (ovsdb-execution.at:1099): ok     (0m0.000s 0m0.004s)
1055. referential integrity -- simple (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1056. referential integrity -- mutual references (ovsdb-execution.at:1099): ok     (0m0.000s 0m0.004s)
1057. weak references (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1058. immutable columns (ovsdb-execution.at:1099): ok     (0m0.000s 0m0.004s)
1059. garbage collection (ovsdb-execution.at:1099): ok     (0m0.004s 0m0.000s)
1060. trigger fires immediately (ovsdb-trigger.at:15): ok     (0m0.004s 0m0.000s)
1061. trigger times out (ovsdb-trigger.at:38): ok     (0m0.004s 0m0.000s)
1062. trigger fires after delay (ovsdb-trigger.at:61): ok     (0m0.004s 0m0.000s)
1063. delayed trigger modifies database (ovsdb-trigger.at:92): ok     (0m0.000s 0m0.004s)
1064. one delayed trigger wakes up another (ovsdb-trigger.at:132): ok     (0m0.000s 0m0.004s)
1065. insert default row, query table (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1066. insert row, query table (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1067. insert rows, query by value (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1068. insert rows, query by named-uuid (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1069. insert rows, update rows by value (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1070. insert rows, mutate rows (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1071. insert rows, delete by named-uuid (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1072. insert rows, delete rows by value (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1073. insert rows, delete by (non-matching) value (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1074. insert rows, delete all (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1075. insert row, query table, commit (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1076. insert row, query table, commit durably (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1077. equality wait with correct rows (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1078. equality wait with extra row (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1079. equality wait with missing row (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1080. inequality wait with correct rows (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1081. inequality wait with extra row (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1082. inequality wait with missing row (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1083. insert and update constraints (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1084. index uniqueness checking (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1085. referential integrity -- simple (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1086. referential integrity -- mutual references (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1087. weak references (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1088. immutable columns (ovsdb-tool.at:30): ok     (0m0.000s 0m0.004s)
1089. garbage collection (ovsdb-tool.at:30): ok     (0m0.004s 0m0.000s)
1090. transaction comments (ovsdb-tool.at:32): ok     (0m0.004s 0m0.000s)
1091. ovsdb-tool compact (ovsdb-tool.at:50): ok     (0m0.016s 0m0.000s)
1092. ovsdb-tool convert -- removing a column (ovsdb-tool.at:158): ok     (0m0.000s 0m0.008s)
1093. ovsdb-tool convert -- adding a column (ovsdb-tool.at:222): ok     (0m0.008s 0m0.000s)
1094. ovsdb-tool schema-version (ovsdb-tool.at:285): ok     (0m0.000s 0m0.000s)
1095. ovsdb-tool db-version (ovsdb-tool.at:292): ok     (0m0.000s 0m0.000s)
1096. ovsdb-tool schema-cksum (ovsdb-tool.at:301): ok     (0m0.000s 0m0.000s)
1097. ovsdb-tool db-cksum (ovsdb-tool.at:308): ok     (0m0.000s 0m0.000s)
1098. ovsdb-tool needs-conversion (no conversion needed) (ovsdb-tool.at:317): ok     (0m0.000s 0m0.000s)
1099. ovsdb-tool needs-conversion (conversion needed) (ovsdb-tool.at:326): ok     (0m0.000s 0m0.000s)
1100. insert default row, query table (ovsdb-server.at:39): ok     (0m0.004s 0m0.000s)
1101. insert row, query table (ovsdb-server.at:39): ok     (0m0.000s 0m0.004s)
1102. insert rows, query by value (ovsdb-server.at:39): ok     (0m0.004s 0m0.000s)
1103. insert rows, query by named-uuid (ovsdb-server.at:39): ok     (0m0.000s 0m0.004s)
1104. insert rows, update rows by value (ovsdb-server.at:39): ok     (0m0.004s 0m0.008s)
1105. insert rows, mutate rows (ovsdb-server.at:39): ok     (0m0.004s 0m0.004s)
1106. insert rows, delete by named-uuid (ovsdb-server.at:39): ok     (0m0.004s 0m0.004s)
1107. insert rows, delete rows by value (ovsdb-server.at:39): ok     (0m0.004s 0m0.008s)
1108. insert rows, delete by (non-matching) value (ovsdb-server.at:39): ok     (0m0.008s 0m0.000s)
1109. insert rows, delete all (ovsdb-server.at:39): ok     (0m0.004s 0m0.004s)
1110. insert row, query table, commit (ovsdb-server.at:39): ok     (0m0.004s 0m0.008s)
1111. insert row, query table, commit durably (ovsdb-server.at:39): ok     (0m0.008s 0m0.000s)
1112. equality wait with correct rows (ovsdb-server.at:39): ok     (0m0.004s 0m0.004s)
1113. equality wait with extra row (ovsdb-server.at:39): ok     (0m0.004s 0m0.004s)
1114. equality wait with missing row (ovsdb-server.at:39): ok     (0m0.008s 0m0.000s)
1115. inequality wait with correct rows (ovsdb-server.at:39): ok     (0m0.000s 0m0.008s)
1116. inequality wait with extra row (ovsdb-server.at:39): ok     (0m0.000s 0m0.008s)
1117. inequality wait with missing row (ovsdb-server.at:39): ok     (0m0.008s 0m0.000s)
1118. insert and update constraints (ovsdb-server.at:39): ok     (0m0.008s 0m0.000s)
1119. index uniqueness checking (ovsdb-server.at:39): ok     (0m0.008s 0m0.004s)
1120. referential integrity -- simple (ovsdb-server.at:39): ok     (0m0.012s 0m0.000s)
1121. referential integrity -- mutual references (ovsdb-server.at:39): ok     (0m0.008s 0m0.004s)
1122. weak references (ovsdb-server.at:39): ok     (0m0.008s 0m0.004s)
1123. immutable columns (ovsdb-server.at:39): ok     (0m0.008s 0m0.004s)
1124. garbage collection (ovsdb-server.at:39): ok     (0m0.008s 0m0.004s)
1125. truncating corrupted database log (ovsdb-server.at:41): ok     (0m0.004s 0m0.004s)
1126. truncating database log with bad transaction (ovsdb-server.at:88): ok     (0m0.004s 0m0.004s)
1127. ovsdb-client get-schema-version (ovsdb-server.at:136): ok     (0m0.000s 0m0.000s)
1128. database multiplexing implementation (ovsdb-server.at:147): ok     (0m0.000s 0m0.000s)
1129. ovsdb-server/add-db and remove-db (ovsdb-server.at:167): ok     (0m0.000s 0m0.000s)
1130. ovsdb-server/add-db with --monitor (ovsdb-server.at:246): ok     (0m0.004s 0m0.004s)
1131. ovsdb-server/add-db and remove-db with --monitor (ovsdb-server.at:278): ok     (0m0.008s 0m0.000s)
1132. --remote=db: implementation (ovsdb-server.at:308): ok     (0m0.008s 0m0.000s)
1133. ovsdb-server/add-remote and remove-remote (ovsdb-server.at:373): ok     (0m0.000s 0m0.000s)
1134. ovsdb-server/add-remote with --monitor (ovsdb-server.at:415): ok     (0m0.004s 0m0.008s)
1135. ovsdb-server/add-remote and remove-remote with --monitor (ovsdb-server.at:445): ok     (0m0.004s 0m0.008s)
1136. SSL db: implementation (ovsdb-server.at:479): skipped (ovsdb-server.at:481)
1137. compacting online (ovsdb-server.at:533): ok     (0m0.020s 0m0.028s)
1138. insert default row, query table (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1139. insert row, query table (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1140. insert rows, query by value (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1141. insert rows, query by named-uuid (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1142. insert rows, update rows by value (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1143. insert rows, mutate rows (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1144. insert rows, delete by named-uuid (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1145. insert rows, delete rows by value (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1146. insert rows, delete by (non-matching) value (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1147. insert rows, delete all (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1148. insert row, query table, commit (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1149. insert row, query table, commit durably (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1150. equality wait with correct rows (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1151. equality wait with extra row (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1152. equality wait with missing row (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1153. inequality wait with correct rows (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1154. inequality wait with extra row (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1155. inequality wait with missing row (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1156. insert and update constraints (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1157. index uniqueness checking (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1158. referential integrity -- simple (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1159. referential integrity -- mutual references (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1160. weak references (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1161. immutable columns (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1162. garbage collection (ovsdb-server.at:703): skipped (ovsdb-server.at:703)
1163. ovsdb-client get-schema-version - tcp socket (ovsdb-server.at:707): ok     (0m0.000s 0m0.000s)
1164. insert default row, query table (ovsdb-server.at:753): ok     (0m0.000s 0m0.004s)
1165. insert row, query table (ovsdb-server.at:753): ok     (0m0.004s 0m0.000s)
1166. insert rows, query by value (ovsdb-server.at:753): ok     (0m0.000s 0m0.004s)
1167. insert rows, query by named-uuid (ovsdb-server.at:753): ok     (0m0.016s 0m0.000s)
1168. insert rows, update rows by value (ovsdb-server.at:753): ok     (0m0.008s 0m0.008s)
1169. insert rows, mutate rows (ovsdb-server.at:753): ok     (0m0.008s 0m0.004s)
1170. insert rows, delete by named-uuid (ovsdb-server.at:753): ok     (0m0.012s 0m0.004s)
1171. insert rows, delete rows by value (ovsdb-server.at:753): ok     (0m0.008s 0m0.008s)
1172. insert rows, delete by (non-matching) value (ovsdb-server.at:753): ok     (0m0.004s 0m0.012s)
1173. insert rows, delete all (ovsdb-server.at:753): ok     (0m0.008s 0m0.008s)
1174. insert row, query table, commit (ovsdb-server.at:753): ok     (0m0.004s 0m0.012s)
1175. insert row, query table, commit durably (ovsdb-server.at:753): ok     (0m0.004s 0m0.008s)
1176. equality wait with correct rows (ovsdb-server.at:753): ok     (0m0.012s 0m0.004s)
1177. equality wait with extra row (ovsdb-server.at:753): ok     (0m0.008s 0m0.004s)
1178. equality wait with missing row (ovsdb-server.at:753): ok     (0m0.008s 0m0.004s)
1179. inequality wait with correct rows (ovsdb-server.at:753): ok     (0m0.004s 0m0.012s)
1180. inequality wait with extra row (ovsdb-server.at:753): ok     (0m0.012s 0m0.004s)
1181. inequality wait with missing row (ovsdb-server.at:753): ok     (0m0.004s 0m0.012s)
1182. insert and update constraints (ovsdb-server.at:753): ok     (0m0.012s 0m0.004s)
1183. index uniqueness checking (ovsdb-server.at:753): ok     (0m0.008s 0m0.008s)
1184. referential integrity -- simple (ovsdb-server.at:753): ok     (0m0.008s 0m0.008s)
1185. referential integrity -- mutual references (ovsdb-server.at:753): ok     (0m0.012s 0m0.000s)
1186. weak references (ovsdb-server.at:753): ok     (0m0.016s 0m0.000s)
1187. immutable columns (ovsdb-server.at:753): ok     (0m0.004s 0m0.008s)
1188. garbage collection (ovsdb-server.at:753): ok     (0m0.004s 0m0.004s)
1189. insert default row, query table (ovsdb-server.at:789): ok     (0m0.008s 0m0.000s)
1190. insert row, query table (ovsdb-server.at:789): ok     (0m0.008s 0m0.000s)
1191. insert rows, query by value (ovsdb-server.at:789): ok     (0m0.000s 0m0.008s)
1192. insert rows, query by named-uuid (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1193. insert rows, update rows by value (ovsdb-server.at:789): ok     (0m0.000s 0m0.004s)
1194. insert rows, mutate rows (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1195. insert rows, delete by named-uuid (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1196. insert rows, delete rows by value (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1197. insert rows, delete by (non-matching) value (ovsdb-server.at:789): ok     (0m0.000s 0m0.004s)
1198. insert rows, delete all (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1199. insert row, query table, commit (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1200. insert row, query table, commit durably (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1201. equality wait with correct rows (ovsdb-server.at:789): ok     (0m0.000s 0m0.004s)
1202. equality wait with extra row (ovsdb-server.at:789): ok     (0m0.000s 0m0.004s)
1203. equality wait with missing row (ovsdb-server.at:789): ok     (0m0.000s 0m0.004s)
1204. inequality wait with correct rows (ovsdb-server.at:789): ok     (0m0.000s 0m0.004s)
1205. inequality wait with extra row (ovsdb-server.at:789): ok     (0m0.000s 0m0.004s)
1206. inequality wait with missing row (ovsdb-server.at:789): ok     (0m0.000s 0m0.004s)
1207. insert and update constraints (ovsdb-server.at:789): ok     (0m0.000s 0m0.004s)
1208. index uniqueness checking (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1209. referential integrity -- simple (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1210. referential integrity -- mutual references (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1211. weak references (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1212. immutable columns (ovsdb-server.at:789): ok     (0m0.000s 0m0.004s)
1213. garbage collection (ovsdb-server.at:789): ok     (0m0.004s 0m0.000s)
1214. monitor insert into empty table (ovsdb-monitor.at:42): ok     (0m0.004s 0m0.004s)
1215. monitor insert into populated table (ovsdb-monitor.at:54): ok     (0m0.008s 0m0.000s)
1216. monitor delete (ovsdb-monitor.at:72): ok     (0m0.008s 0m0.000s)
1217. monitor row update (ovsdb-monitor.at:90): ok     (0m0.012s 0m0.004s)
1218. monitor no-op row updates (ovsdb-monitor.at:110): ok     (0m0.012s 0m0.004s)
1219. monitor insert-and-update transaction (ovsdb-monitor.at:133): ok     (0m0.016s 0m0.000s)
1220. monitor insert-update-and-delete transaction (ovsdb-monitor.at:156): ok     (0m0.016s 0m0.000s)
1221. monitor weak reference change (ovsdb-monitor.at:185): ok     (0m0.012s 0m0.008s)
1222. monitor insert-update-and-delete transaction (ovsdb-monitor.at:220): ok     (0m0.016s 0m0.000s)
1223. monitor all operations (ovsdb-monitor.at:271): ok     (0m0.004s 0m0.012s)
1224. monitor initial only (ovsdb-monitor.at:291): ok     (0m0.012s 0m0.004s)
1225. monitor insert only (ovsdb-monitor.at:298): ok     (0m0.012s 0m0.004s)
1226. monitor delete only (ovsdb-monitor.at:305): ok     (0m0.008s 0m0.008s)
1227. monitor modify only (ovsdb-monitor.at:313): ok     (0m0.016s 0m0.004s)
1228. simple idl, initially empty, no ops - C (ovsdb-idl.at:80): ok     (0m0.004s 0m0.008s)
1229. simple idl, initially empty, no ops - Python (ovsdb-idl.at:80): ok     (0m0.196s 0m0.032s)
1230. simple idl, initially empty, no ops - Python tcp (ovsdb-idl.at:80): ok     (0m0.216s 0m0.012s)
testsuite:18: WARNING: caught signal INT, bailing out
